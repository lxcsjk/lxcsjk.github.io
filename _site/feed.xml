<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YoRuo:想变得更好</title>
    <description>欢迎来到我的Blog~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 13 Jan 2017 13:58:45 +0800</pubDate>
    <lastBuildDate>Fri, 13 Jan 2017 13:58:45 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>2017</title>
        <description>&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2017的目标~~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;16年的有几个还是没完成，特别是体重！！！ 166了 妈惹。 想大一我才120. 😉😉😉&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;今年，本命年。😢😢😢&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Work：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;iOS开发也接触了一段时间，转眼大半年两个app都上了，java有点荒废了，js也进步了。所以在寒假把java的基础复习复习，顺便把项目不完善的地方改改。毕竟寒假在家也没有啥事情。感觉JavaScript真是神奇的语言，慢慢体会其中的精髓。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提到工资了，13k吧，每个月的房贷也不少，感觉拿这个数字不难。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;好吧，那本书还在睡觉，所以还是得好好看看。（以后绝对不会再买实体书有了iPad还是PDF，环保健康！）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Life:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;已经看过了周董的演唱会，如果17年有闲钱的话去旅旅游吧。很久没出去走走了。 暂定  厦门 &amp;amp; 云南 &amp;amp; 内蒙古&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;换个房子住，离地铁近点，租金可能贵点但是要舒服很多，逃离松江，总感觉有点点脏。还是浦东干净舒适。可能去猴子那边小区找个房子，等猴子留学回来还可以蹭蹭饭。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;还是体重体重体重。。 说三遍 = = （PS:我妹说减肥等于整容）换了房子再在咸鱼找个转卡的，去健健身。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2017/01/2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/2017/</guid>
        
        <category>My</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Invalid Bundle. iPad Multitasking support requires these orientations</title>
        <description>&lt;p&gt;前段时间把app适配一下iPad，再提交的时候出了一些问题&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ERROR ITMS-90474: “Invalid Bundle. iPad Multitasking support requires these orientations: ‘UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight’. Found ‘UIInterfaceOrientationPortrait,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight’ in bundle “bundle_Name”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查了一下资料原来是 &lt;strong&gt;ios9 iPad 的分屏适配&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So~
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161224-132228@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次提交一下 OK啦&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/Invalid-Bundle.-iPad-Multitasking-support-requires-these-orientations/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/Invalid-Bundle.-iPad-Multitasking-support-requires-these-orientations/</guid>
        
        <category>iOS</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>PresentViewController 在 iPad 上执行失败</title>
        <description>&lt;p&gt;在选择头像图片的时候 使用  &lt;code class=&quot;highlighter-rouge&quot;&gt;imagePickerController&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [self presentViewController:imagePickerController animated:YES completion:^{
            
  }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;异常信息&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2016-12-20 13:50:23.096416 Training[1963:904966] Warning: Attempt to present &amp;lt;UIImagePickerController: 0x14a9d0c00&amp;gt;  on &amp;lt;MySelfViewController: 0x149d2d480&amp;gt; which is already presenting (null)&lt;/p&gt;

  &lt;p&gt;2016-12-20 13:50:23.106841 Training[1963:904966] [Warning] &amp;lt;_UIPopoverBackgroundVisualEffectView 0x149dcbd40&amp;gt; is being asked to animate its opacity. This will cause the effect to appear broken until opacity returns to 1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;google了一下 找到了解决方法 &lt;a href=&quot;http://stackoverflow.com/questions/32380967/presentviewcontroller-animated-not-displaying-on-ipad&quot;&gt;presentviewcontroller-animated-not-displaying-on-ipad&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    dispatch_async(dispatch_get_main_queue(), ^ {
        [self presentViewController:imagePickerController animated:YES completion:^{
            
        }];
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;但是这是为啥呢 在iPhone上没问题 歪果仁是这样说的 &lt;a href=&quot;http://stackoverflow.com/questions/24854802/presenting-a-view-controller-modally-from-an-action-sheets-delegate-in-ios8-i/24854803#24854803&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem seems to come from Apple’s switch to using UIAlertController internally to implement the functionality of alert views and action sheets. The issue is seen mostly on iPad and action sheets, because on iPad, action sheets are presented as a popover within a specified view, and what Apple does is travel the responder chain until it finds a view controller and calls presentViewController:animated:completion: with the internal UIAlertController. The problem is less obvious on iPhone and with alert views, because there Apple actually creates a separate window, an empty view controller and presents the internal UIAlertController on top of that, so it seems to not interfere with other presentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大概意思是这样的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;presentViewController 需要找到一个视图控制器然后执行，在iPhone上，Apple实际上创建了一个单独的窗口，一个空视图控制器，并在其上显示，因此不会干扰其他显示。而iPad上面没有这样做。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Tue, 20 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/PresentViewController-%E5%9C%A8-iPad-%E4%B8%8A%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/PresentViewController-%E5%9C%A8-iPad-%E4%B8%8A%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5/</guid>
        
        <category>iOS</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>录音文件lame转换MP3相关配置</title>
        <description>&lt;p&gt;文件下载整个功能完成了，那么对应的文件上传也跑不了。So~ Look here~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;业务需求是录制音频然后上传到七牛并且Android可以读。&lt;/p&gt;

&lt;p&gt;与安卓沟通了一下统一了mp3格式，大小质量都不错。由于&lt;code class=&quot;highlighter-rouge&quot;&gt;AVAudioRecorder&lt;/code&gt;录音的格式为.caf或者.wav而且很大需要进行转换压缩为MP3格式。这里需要用到三方库 &lt;code class=&quot;highlighter-rouge&quot;&gt;lame&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用lame转换后音频的质量和&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; _recorder = [[AVAudioRecorder alloc] initWithURL:_recordFilePath settings:setting error:NULL];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;里的 &lt;strong&gt;&lt;em&gt;setting&lt;/em&gt;&lt;/strong&gt; 息息相关。 所以整理了两个配置。&lt;/p&gt;

&lt;p&gt;我把这两种的配置写在了工具类所以直接贴代码了~要用的话直接CV大法就可以。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://oh6uhie7j.bkt.clouddn.com/lame.zip&quot;&gt;lame三方库的资源&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;获取转换文件所在文件夹&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)getRecPathUrl{
    NSString *str = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
    
    NSString *recordDir = [str stringByAppendingPathComponent:@&quot;RecordCourse&quot;];
    
    return recordDir;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;获取时间戳用于文件的命名&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)getTimestamp{
    NSDate *nowDate = [NSDate date];
    double timestamp = (double)[nowDate timeIntervalSince1970]*1000;
    long nowTimestamp = [[NSNumber numberWithDouble:timestamp] longValue];
    NSString *timestampStr = [NSString stringWithFormat:@&quot;%ld&quot;,nowTimestamp];
    return timestampStr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;PCM转换MP3配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSDictionary *)getAudioSettingWithPCM {
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    //设置录音格式
    [dic setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
    //设置录音采样率，8000是电话采样率，对于一般录音已经够了
    [dic setObject:@(44100.0) forKey:AVSampleRateKey];
    //设置通道,这里采用双声道
    [dic setObject:@(1) forKey:AVNumberOfChannelsKey];
    //每个采样点位数,分为8、16、24、32
    [dic setObject:@(16) forKey:AVLinearPCMBitDepthKey];
    //是否使用浮点数采样
    [dic setObject:@(YES) forKey:AVLinearPCMIsFloatKey];
    //....其他设置等
    return dic;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CAF转换MP3配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSDictionary *)getAudioSettingWithCAF {
    NSDictionary *setting = [NSDictionary dictionaryWithObjectsAndKeys:
                             [NSNumber numberWithInt:AVAudioQualityMin],
                             AVEncoderAudioQualityKey,
                             [NSNumber numberWithInt:16],
                             AVEncoderBitRateKey,
                             [NSNumber numberWithInt:2],
                             AVNumberOfChannelsKey,
                             [NSNumber numberWithFloat:44100.0],
                             AVSampleRateKey,
                             nil];

    return setting;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;PCM转换MP3的lame方法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)audioPCMtoMP3:(NSString *)wavPath {
    NSString *cafFilePath = wavPath;
    
    NSString *mp3FilePath = [NSString stringWithFormat:@&quot;%@.mp3&quot;,[NSString stringWithFormat:@&quot;%@%@&quot;,[cafFilePath substringToIndex:cafFilePath.length - 4],[self getTimestamp]]];
    
    NSFileManager* fileManager = [NSFileManager defaultManager];
    if([fileManager removeItemAtPath:mp3FilePath error:nil]){
        NSLog(@&quot;删除原MP3文件&quot;);
    }
    @try {
        int read, write;
        FILE *pcm = fopen([cafFilePath cStringUsingEncoding:1], &quot;rb&quot;);  //source 被转换的音频文件位置
        fseek(pcm, 4*1024, SEEK_CUR);                                   //skip file header
        FILE *mp3 = fopen([mp3FilePath cStringUsingEncoding:1], &quot;wb&quot;);  //output 输出生成的Mp3文件位置
        const int PCM_SIZE = 8192;
        const int MP3_SIZE = 8192;
        short int pcm_buffer[PCM_SIZE*2];
        unsigned char mp3_buffer[MP3_SIZE];
        
        lame_t lame = lame_init();
        lame_set_in_samplerate(lame, 22050.0);
        lame_set_VBR(lame, vbr_default);
        lame_init_params(lame);
        
        do {
            read = fread(pcm_buffer, 2*sizeof(short int), PCM_SIZE, pcm);
            if (read == 0)
                write = lame_encode_flush(lame, mp3_buffer, MP3_SIZE);
            else
                write = lame_encode_buffer_interleaved(lame, pcm_buffer, read, mp3_buffer, MP3_SIZE);
            
            fwrite(mp3_buffer, write, 1, mp3);
            
        } while (read != 0);
        
        lame_close(lame);
        fclose(mp3);
        fclose(pcm);
    }
    @catch (NSException *exception) {
        NSLog(@&quot;%@&quot;,[exception description]);
    }
    @finally {
        return mp3FilePath;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CAF转换MP3的lame方法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)audioCAFtoMP3:(NSString *)wavPath {
    
    NSString *cafFilePath = wavPath;
    
    NSString *mp3FilePath = [NSString stringWithFormat:@&quot;%@.mp3&quot;,[NSString stringWithFormat:@&quot;%@%@&quot;,[cafFilePath substringToIndex:cafFilePath.length - 4],[self getTimestamp]]];
    
    @try {
        int read, write;
        
        FILE *pcm = fopen([cafFilePath cStringUsingEncoding:1], &quot;rb&quot;);  //source 被转换的音频文件位置
        fseek(pcm, 4*1024, SEEK_CUR);                                   //skip file header
        FILE *mp3 = fopen([mp3FilePath cStringUsingEncoding:1], &quot;wb&quot;);  //output 输出生成的Mp3文件位置
        
        const int PCM_SIZE = 8192;
        const int MP3_SIZE = 8192;
        short int pcm_buffer[PCM_SIZE*2];
        unsigned char mp3_buffer[MP3_SIZE];
        
        lame_t lame = lame_init();
        lame_set_num_channels(lame,1);//设置1为单通道，默认为2双通道
        lame_set_in_samplerate(lame, 44100.0);
        lame_set_VBR(lame, vbr_default);
        
        lame_set_brate(lame,8);
        
        lame_set_mode(lame,3);
        
        lame_set_quality(lame,2);
        
        lame_init_params(lame);
        
        do {
            read = fread(pcm_buffer, 2*sizeof(short int), PCM_SIZE, pcm);
            if (read == 0)
                write = lame_encode_flush(lame, mp3_buffer, MP3_SIZE);
            else
                write = lame_encode_buffer_interleaved(lame, pcm_buffer, read, mp3_buffer, MP3_SIZE);
            
            fwrite(mp3_buffer, write, 1, mp3);
            
        } while (read != 0);
        
        lame_close(lame);
        fclose(mp3);
        fclose(pcm);
    }
    @catch (NSException *exception) {
        NSLog(@&quot;%@&quot;,[exception description]);
    }
    @finally {
        return mp3FilePath;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;两种质量大小不错都可以使用😁😁&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/%E5%BD%95%E9%9F%B3%E6%96%87%E4%BB%B6lame%E8%BD%AC%E6%8D%A2MP3%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/%E5%BD%95%E9%9F%B3%E6%96%87%E4%BB%B6lame%E8%BD%AC%E6%8D%A2MP3%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</guid>
        
        <category>lame</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Mac更新10.12后关机很慢的问题</title>
        <description>&lt;p&gt;之前电脑升级了MacOS Sierra，然后关机都特别慢，起码要20分钟。问了周围朋友有的出现有的没有。今天才知道是因为本地MySQL服务的问题。So那就重新装一个吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;macmysql-&quot;&gt;下载最新mac版本的mysql 地址&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/downloads/file/?id=466265&quot;&gt;mysql-5.7.16-osx10.11-x86_64.dmg&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mysql&quot;&gt;卸载MySQL&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
vim /etc/hostconfig  (and removed the line MYSQLCOM=-YES-)
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这么多rm -rf 不敢写个脚本直接跑。。。 😂😂😂 虽然机器比我靠谱&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mysql-1&quot;&gt;安装MySQL&lt;/h3&gt;

&lt;p&gt;直接安装dmg文件就OK了。&lt;/p&gt;

&lt;p&gt;会出一个提示，root的密码。这之后需要改一下。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2016-12-03T05:27:15.648601Z 1 [Note] A temporary password is generated for root@localhost: 
pju%C!a?t4ek
If you lose this password, please consult the section How to Reset the Root Password in the MySQL reference manual.
You must reset your password using ALTER USER statement before executing this statement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;电脑上有 &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL Workbench&lt;/code&gt; 所以就直接改了 没用命令行了。&lt;/p&gt;

&lt;p&gt;最后Navicat连上了 就OK了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;记得卸载之前保存一下sql脚本来恢复数据&lt;/strong&gt; 😂😂😂&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/Mac%E6%9B%B4%E6%96%B010.12%E5%90%8E%E5%85%B3%E6%9C%BA%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/Mac%E6%9B%B4%E6%96%B010.12%E5%90%8E%E5%85%B3%E6%9C%BA%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        
        <category>Mac</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>FMDB 整理总结</title>
        <description>&lt;p&gt;这几天在写文件下载，断点续传，需要用到FMDB进行数据的管理，等写完也总结一下。&lt;/p&gt;

&lt;p&gt;其实也是这两天才学习 &lt;code class=&quot;highlighter-rouge&quot;&gt;FMDB&lt;/code&gt;，google了一下资料有很多，就去 github 上面先 &lt;a href=&quot;https://github.com/ccgus/fmdb&quot;&gt;Star&lt;/a&gt; 一下&lt;code class=&quot;highlighter-rouge&quot;&gt;FMDB&lt;/code&gt;，发现他&lt;code class=&quot;highlighter-rouge&quot;&gt;README.markdown&lt;/code&gt;写的很详细。然后也看了唐巧大牛的&lt;a href=&quot;http://blog.devtang.com/2012/04/22/use-fmdb/&quot;&gt;技术博客&lt;/a&gt;，写了&lt;a href=&quot;https://github.com/lxcsjk/FMDBDemo&quot;&gt;FMDBDemo&lt;/a&gt;玩玩。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;集成到项目&lt;/h3&gt;

&lt;p&gt;通过 &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; 添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod 'FMDB'&lt;/code&gt; 然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update --verbose --no-repo-update&lt;/code&gt; OK~&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;创建数据库&lt;/h3&gt;

&lt;p&gt;导入 &lt;code class=&quot;highlighter-rouge&quot;&gt;libsqlite3.tbd&lt;/code&gt;  (&lt;code class=&quot;highlighter-rouge&quot;&gt;libsqlite3.0.tbd&lt;/code&gt; 也可以)
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161203-223307@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;引入 &lt;code class=&quot;highlighter-rouge&quot;&gt;#import &quot;FMDB.h&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;创建数据库&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    NSString *doc =[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) lastObject];
    
    fileName = [doc stringByAppendingPathComponent:@&quot;downCourse.sqlite&quot;];
    
    DLog(@&quot;sql文件路径 ： %@&quot;,fileName);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我创建在&lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt;目录下&lt;/p&gt;

&lt;p&gt;关于创建数据库：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;FMDatabase&lt;/code&gt; is created with a path to a SQLite database file. This path can be one of these three:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;A file system path. The file does not have to exist on disk. If it does not exist, it is created for you.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;An empty string (@””). An empty database is created at a temporary location. This database is deleted with the &lt;code class=&quot;highlighter-rouge&quot;&gt;FMDatabase&lt;/code&gt; connection is closed.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. An in-memory database is created. This database will be destroyed with the FMDatabase connection is closed.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思就是&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;建立数据库只需要如下一行即可 , 当该文件不存在时，fmdb 会自己创建一个。如果你传入的参数是空串：@”” ，则 fmdb 会在临时文件目录下创建这个数据库，如果你传入的参数是 NULL，则它会建立一个在内存中的数据库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;打开数据库&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
    	// sql
    }
    [db close];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以了 执行完 注意一定要 &lt;code class=&quot;highlighter-rouge&quot;&gt;[db close]&lt;/code&gt; 关闭数据库&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;创建表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)createTable{
    //    NSFileManager * fileManager = [NSFileManager defaultManager];
    //    if ([fileManager fileExistsAtPath:fileName] == NO) {
    if (!isTableExist) {
        FMDatabase *db = [FMDatabase databaseWithPath:fileName];
        if ([db open]){
            //  创建表
            BOOL result = [db executeUpdate:@&quot;CREATE TABLE 't_down_course' ('id' INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL , 'courseId' INTEGER, 'downPath' VARCHAR(255),'courseInfo' text)&quot;];
            if (result){
                DLog(@&quot;创建表成功&quot;);
                isTableExist = YES;
                [self showAlertWithMessage:@&quot;创建表 --- 成功&quot; completion:nil];
            }else{
                [self showAlertWithMessage:@&quot;创建表 --- 失败&quot; completion:nil];
            }
            [db close];
        }else{
            [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
        }
    }
    //    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建名称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;t_down_course&lt;/code&gt; 的表&lt;/p&gt;

&lt;h5 id=&quot;section-5&quot;&gt;对表的属性怎删改&lt;/h5&gt;

&lt;p&gt;语法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BOOL result = [db executeUpdate:sql]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如需在表中添加列，请使用下列语法:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 ALTER TABLE table_name ADD column_name datatype
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要删除表中的列，请使用下列语法:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 ALTER TABLE table_name DROP COLUMN column_name
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新表中列的属性，请使用下列语法:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 ALTER TABLE table_name MODIFY COLUMN column_name datatype
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-6&quot;&gt;插入数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)addData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    
    NSDictionary *dic = @{
                          @&quot;code&quot;: @0,
                          @&quot;msg&quot;: @&quot;success&quot;,
                          @&quot;data&quot;: @{
                              @&quot;course&quot;: @{
                                  @&quot;id&quot;: @24,
                                  @&quot;crowdId&quot;: @4,
                                  @&quot;ccode&quot;: @&quot;KIa8nNpVmc&quot;,
                                  @&quot;cname&quot;: @&quot;健健康康&quot;,
                                  @&quot;coverImg&quot;: @&quot;http://ocd2lp9uj.bkt.clouddn.com/FaceQ1445612150222.jpg&quot;,
                                  @&quot;description&quot;: @&quot;淋漓尽致&quot;,
                                  @&quot;speaker&quot;: @2,
                                  @&quot;speakerName&quot;: @&quot;刘欣成&quot;,
                                  @&quot;speakerHeadIcon&quot;: @&quot;http://ocd2lp9uj.bkt.clouddn.com/FaceQ1445612150222.jpg&quot;,
                                  @&quot;startTime&quot;: @&quot;2016-10-15 11:21:44&quot;,
                                  @&quot;endTime&quot;: @&quot;2016-10-15 11:26:50&quot;,
                                  @&quot;liveStatus&quot;: @&quot;2&quot;,
                                  @&quot;saveStatus&quot;: @&quot;2&quot;
                              }
                          }
                    };
    NSString *json = [self dictionaryToJson:dic];
    
    if ([db open]){
        NSString *insertSql = @&quot;insert into 't_down_course'(courseId,downPath,courseInfo) values(?,?,?)&quot;;
        BOOL result = [db executeUpdate:insertSql,[NSString stringWithFormat:@&quot;%d&quot;,count],fileName,json];
        if (result){
            DLog(@&quot;添加数据成功&quot;);
            [self showAlertWithMessage:@&quot;添加数据 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;添加数据失败&quot;);
            [self showAlertWithMessage:@&quot;添加数据 --- 失败&quot; completion:nil];
        }
        count++;
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;插入数据类型必须为&lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; 的子类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基本类型需要封装为对应的包装类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;支持占位符，后添加再数据&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-7&quot;&gt;插入也支持以字典的方式&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *arguments = @{@&quot;identifier&quot;: @(identifier), @&quot;name&quot;: name, @&quot;date&quot;: date, @&quot;comment&quot;: comment ?: [NSNull null]};
BOOL success = [db executeUpdate:@&quot;INSERT INTO authors (identifier, name, date, comment) VALUES (:identifier, :name, :date, :comment)&quot; withParameterDictionary:arguments];
if (!success) {
    NSLog(@&quot;error = %@&quot;, [db lastErrorMessage]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-8&quot;&gt;支持对事务的控制&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[db open]

[db beginDeferredTransaction];//开启事务

BOOL result = [db executeUpdate:insertSql,[NSString stringWithFormat:@&quot;%d&quot;,count],fileName,json];

if(result){
	[db commit];// 提交事务
}else{
	[db rollback];// 回滚事务
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-9&quot;&gt;查询数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)selectData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        NSString *selectSql = @&quot;select * from t_down_course&quot;;
        FMResultSet * rs = [db executeQuery:selectSql];
        while ([rs next]) {
            int course = [rs intForColumn:@&quot;id&quot;];
            NSString * courseId = [rs stringForColumn:@&quot;courseId&quot;];
            NSString * downPath = [rs stringForColumn:@&quot;downPath&quot;];
            NSString * courseInfo = [rs stringForColumn:@&quot;courseInfo&quot;];

            DLog(@&quot;course id = %d, courseId = %@, downPath = %@  courseInfo = %@&quot;, course, courseId, downPath,courseInfo);
            
            NSMutableDictionary *dic = [self dictionaryWithJsonString:courseInfo];
            DLog(@&quot;%@&quot;,dic);
        }
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：即使操作结果只有一行，也需要先调用 FMResultSet 的 next 方法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FMDB提供了多个方法获取不同类型的数据&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;intForColumn:&lt;/li&gt;
  &lt;li&gt;longForColumn:&lt;/li&gt;
  &lt;li&gt;longLongIntForColumn:&lt;/li&gt;
  &lt;li&gt;boolForColumn:&lt;/li&gt;
  &lt;li&gt;doubleForColumn:&lt;/li&gt;
  &lt;li&gt;stringForColumn:&lt;/li&gt;
  &lt;li&gt;dateForColumn:&lt;/li&gt;
  &lt;li&gt;dataForColumn:&lt;/li&gt;
  &lt;li&gt;dataNoCopyForColumn:&lt;/li&gt;
  &lt;li&gt;UTF8StringForColumnIndex:&lt;/li&gt;
  &lt;li&gt;objectForColumn:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;这些方法也都有一个{类型} ForColumnIndex:,用于检索数据基于列的位置的结果,而不是列的名称。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如  &lt;code class=&quot;highlighter-rouge&quot;&gt;[rs intForColumnIndex:0]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;支持多个语句批处理&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *sql = @&quot;create table bulktest1 (id integer primary key autoincrement, x text);&quot;
                 &quot;create table bulktest2 (id integer primary key autoincrement, y text);&quot;
                 &quot;create table bulktest3 (id integer primary key autoincrement, z text);&quot;
                 &quot;insert into bulktest1 (x) values ('XXX');&quot;
                 &quot;insert into bulktest2 (y) values ('YYY');&quot;
                 &quot;insert into bulktest3 (z) values ('ZZZ');&quot;;

success = [db executeStatements:sql];

sql = @&quot;select count(*) as count from bulktest1;&quot;
       &quot;select count(*) as count from bulktest2;&quot;
       &quot;select count(*) as count from bulktest3;&quot;;

success = [self.db executeStatements:sql withResultBlock:^int(NSDictionary *dictionary) {
    NSInteger count = [dictionary[@&quot;count&quot;] integerValue];
    XCTAssertEqual(count, 1, @&quot;expected one record for dictionary %@&quot;, dictionary);
    return 0;
}];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-10&quot;&gt;更新数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)updateData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        BOOL result = [db executeUpdate:@&quot;update t_down_course set downPath = '更新的数据' where id = 3&quot;];
        if (result){
            DLog(@&quot;更新数据成功&quot;);
            [self showAlertWithMessage:@&quot;更新数据 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;更新数据失败&quot;);
            [self showAlertWithMessage:@&quot;更新数据 --- 失败&quot; completion:nil];
        }
        
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-11&quot;&gt;删除数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)deleteData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        BOOL result = [db executeUpdate:@&quot;delete from t_down_course where id = 2&quot;];
        if (result){
            DLog(@&quot;删除数据成功&quot;);
            [self showAlertWithMessage:@&quot;删除数据 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;删除数据失败&quot;);
            [self showAlertWithMessage:@&quot;删除数据 --- 失败&quot; completion:nil];
        }
        
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-12&quot;&gt;删除表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)dropTable{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        BOOL result = [db executeUpdate:@&quot;drop table t_down_course&quot;];
        if (result){
            DLog(@&quot;删除表成功&quot;);
            isTableExist = NO;
            [self showAlertWithMessage:@&quot;删除表 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;删除表失败&quot;);
            [self showAlertWithMessage:@&quot;删除表 --- 失败&quot; completion:nil];
        }
        
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-13&quot;&gt;多线程操作&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果应用中使用了多线程操作数据库，那么就需要使用FMDatabaseQueue来保证线程安全了。 应用中不可在多个线程中共同使用一个FMDatabase对象操作数据库，这样会引起数据库数据混乱。 为了多线程操作数据库安全，FMDB使用了FMDatabaseQueue，使用FMDatabaseQueue很简单，首先用一个数据库文件地址来初使化FMDatabaseQueue，然后就可以将一个闭包(block)传入inDatabase方法中。 在闭包中操作数据库，而不直接参与FMDatabase的管理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;section-14&quot;&gt;创建单例&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  XCDatabaseHelper.h
//  Training
//
//  Created by LXC on 2016/12/3.
//  Copyright © 2016年 LXC. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &quot;FMDB.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XCDatabaseHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCDatabaseHelper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  XCDatabaseHelper.m
//  Training
//
//  Created by LXC on 2016/12/3.
//  Copyright © 2016年 LXC. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &quot;XCDatabaseHelper.h&quot;
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XCDatabaseHelper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FMDatabaseQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDocumentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUserDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lastObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbFilePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;downCourse.sqlite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabaseQueue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;databaseQueueWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCDatabaseHelper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_once_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__strong&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_sharedObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_sharedObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_sharedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-15&quot;&gt;调用&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        [[XCDatabaseHelper sharedInstance] inDatabase:^(FMDatabase *db) {
            BOOL result = [db executeUpdate:@&quot;update t_down_course set downloadStatus = '1' where courseId = ?&quot;,_course.ids];
            if (result){

            }
        }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里就不需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-16&quot;&gt;注意&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;FMDatabaseQueue虽然看似一个队列，实际上它本身并不是，它通过内部创建一个Serial的dispatch_queue_t来处理通过inDatabase和inTransaction传入的Blocks，所以当我们在主线程（或者后台）调用inDatabase或者inTransaction时，代码实际上是同步的。FMDatabaseQueue这么设计的目的是让我们避免发生并发访问数据库的问题，因为对数据库的访问可能是随机的（在任何时候）、不同线程间（不同的网络回调等）的请求。内置一个Serial队列后，FMDatabaseQueue就变成线程安全了，所有的数据库访问都是同步执行，而且这比使用@synchronized或NSLock要高效得多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;但是这么一来就有了一个问题：如果后台在执行大量的更新，而主线程也需要访问数据库，虽然要访问的数据量很少，但是在后台执行完之前，还是会阻塞主线程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;引用这篇&lt;a href=&quot;http://blog.csdn.net/zhangao0086/article/details/44223007&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over~~ 洗澡睡觉😴😴😴&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Dec 2016 23:24:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/FMDB%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/FMDB%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</guid>
        
        <category>FMDB</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Doesn't include the currently selected device </title>
        <description>&lt;p&gt;昨晚把一直想买的iPad mini4给拿下了，晚上11.34下的单 第二天的3.30就拿到了，京东真是快。&lt;/p&gt;

&lt;p&gt;本来一天都在弄文件下载，断点下载进度条多线程之类的事情，老大说把我们app RUN 到iPad上看看。R了一下bulid失败了。错误信息&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Provisioning profile “match Development com.XXX.YYY” doesn’t include the currently selected device “XXX”.
Code signing is required for product type ‘Application’ in SDK ‘iOS 10.0’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Xcode已经是最新的了，iPad是10.0.1绝对是没问题的应该。于是Google了一下。找到了这个解答&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/39426287/xcode-8-cannot-run-on-device-provisioning-profile-problems-mentioning-apple-wat&quot;&gt;Xcode 8 cannot run on device, provisioning profile problems mentioning Apple Watch&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I had the same issue today - XCode Version 8.0 (8A218a) - and fixed it with two simple steps (instead of the more complicated approach above:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;add the Apple Watch to member center (did not find a copy&amp;amp;paste option either)&lt;/li&gt;
    &lt;li&gt;edit the development provisioning profile and add the watch to devices, save&lt;/li&gt;
    &lt;li&gt;go to XCode prefs, move the old provisioning profile to trash (right click on the name) and download the new version&lt;/li&gt;
    &lt;li&gt;set the new provisioning profile in project editor
No restart, clean or anything else needed. Worked like a charm&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;需要在描述文件添加设备的UDID&lt;/p&gt;

&lt;p&gt;UDID可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;iTunes&lt;/code&gt; 拿到。
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161130-0@2x.png&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;如果看不到UDID多点几下我抹红的地方就行了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;拿到这个UDID 登录到 &lt;a href=&quot;https://developer.apple.com&quot;&gt;苹果开发者中心&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;登录账号后 找到&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161130-2@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161130-3@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161130-4@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最好在描述文件添加这个设备&lt;/p&gt;

&lt;p&gt;点 &lt;strong&gt;edit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161130-1@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Select All&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161130-5@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;再去xcode 重新下载一下描述文件 clean 一下就OK了&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Nov 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/11/Doesn't-include-the-currently-selected-devic/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/Doesn't-include-the-currently-selected-devic/</guid>
        
        <category>iPad</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>我的博客是如何搭建的</title>
        <description>&lt;p&gt;拥有自己的博客还是一件很开心的事情，哪怕没有什么人来看。也是对自己成长的记录。来说说如何搭建吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首先你需要了解 &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; 仓库托管 和 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; 的相关内容&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;不需要买服务器部署搭建环境等等&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;不需要购买域名和备案&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;很快的上手&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;原理&lt;/h3&gt;

&lt;p&gt;Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 Markdown （或者 Textile） 以及 Liquid 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Pages 上。接下在自己的电脑搭建一个测试环境吧 😎😎😎&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;安装 jekyll&lt;/h3&gt;

&lt;p&gt;需要本机的环境 Git 环境（用于部署到远端）、Ruby 环境（Jekyll 是基于 Ruby 开发的）、包管理器 &lt;a href=&quot;https://gems.ruby-china.org/&quot;&gt;RubyGems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由于我是MacOS系统所以就不需要了 需要安装Xcode 和 命令行工具就行了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcode-select --install 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruby-lang.org/zh_cn/documentation/installation/#building-from-source&quot;&gt;安装Ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;推荐一个git管理项目的工具 可能需要登录账户注册 所以 翻出去吧  = =&lt;/p&gt;

&lt;p&gt;不用翻墙访问&lt;a href=&quot;https://www.google.com.hk/&quot;&gt;Google&lt;/a&gt;等等 修改&lt;a href=&quot;https://github.com/racaljk/hosts&quot;&gt;hosts&lt;/a&gt;的方法&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://oh6uhie7j.bkt.clouddn.com/SourceTree_2.3.1.zip&quot;&gt;SourceTree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;环境都已经具备后安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建你的博客所在文件夹&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new myBlog    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进入博客文件夹的目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd yourBlogFolder
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动jekyll服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll server
或者
jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在 Chrome 浏览器 输入 &lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jekyll-1&quot;&gt;配置jekyll&lt;/h3&gt;

&lt;p&gt;jekyll是通过目录下面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;配置的&lt;/p&gt;

&lt;p&gt;jekyll &lt;a href=&quot;http://jekyll.com.cn/&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我博客&lt;a href=&quot;https://github.com/lxcsjk/lxcsjk.github.io&quot;&gt;主题&lt;/a&gt; fork 是 这位大神&lt;a href=&quot;http://baixin.io/&quot;&gt;潘柏信&lt;/a&gt;的 &lt;a href=&quot;https://github.com/leopardpan/leopardpan.github.io&quot;&gt;仓库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;你下载主题后 进入到文件夹 先安装一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt;  命令&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching: bundler-1.13.5.gem (100%)
Successfully installed bundler-1.13.5
Parsing documentation for bundler-1.13.5
Installing ri documentation for bundler-1.13.5
Done installing documentation for bundler after 5 seconds
1 gem installed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不然会报错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Users/lxc/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require': cannot load such file -- bundler (LoadError)
	from /Users/xxxxxxxx/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/lib/jekyll/plugin_manager.rb:34:in `require_from_bundler'
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/exe/jekyll:9:in `&amp;lt;top (required)&amp;gt;'
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in `load'
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in `&amp;lt;main&amp;gt;'
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in `eval'
	from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in `&amp;lt;main&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后执行 之前记得修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt; 的镜像源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更新 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem update --system # 这里请翻墙一下
$ gem -v
2.6.3

$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
$ gem sources -l
https://gems.ruby-china.org
# 确保只有 gems.ruby-china.org

$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后如果报错 缺少什么安装什么包就行了&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll-paginate
gem install jekyll-sitemap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuration file: /data/static/img/yourBlog/_config.yml
Configuration file: /data/static/img/yourBlog/_config.yml
            Source: /data/static/img/yourBlog
       Destination: /data/static/img/yourBlog/_site
 Incremental build: disabled. Enable with --incremental
      Generating... 
                    done in 0.475 seconds.
 Auto-regeneration: enabled for '/data/static/img/yourBlog'
Configuration file: /data/static/img/yourBlog/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;打开浏览器输入 &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt; 就OK啦&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;加入第三方的社会化工具&lt;/h3&gt;

&lt;p&gt;Disqus 已经被墙了 So 用国内的吧 &lt;a href=&quot;http://duoshuo.com/&quot;&gt;多说&lt;/a&gt;就挺好的 
把多说代码片段复制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;文件夹下 &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt;文件内的&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;/article&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;标签之间即可&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;加入统计之类的代码&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;用google的需要改hosts 上面有提到方法&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tongji.baidu.com/&quot;&gt;百度统计&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;选择一个&lt;/p&gt;

&lt;p&gt;复制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; 文件夹下 &lt;code class=&quot;highlighter-rouge&quot;&gt;default.html&lt;/code&gt; 文件内的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;标签之上即可。 当然也可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;配置&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;申请自己的域名&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;这一步之前得将你本地博客所以文件通过 GitHub Desktop 提交到你的GITHub Pages仓库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于  &lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub Pages&lt;/code&gt; 时常不能访问 原因是 TC的大炮攻击&lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;所致 所以最好自己添加一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;  那么问题来了域名从哪里来呢。 So…  Come on!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://my.freenom.com&quot;&gt;戳这里&lt;/a&gt;
可以申请 免费域名只有  &lt;code class=&quot;highlighter-rouge&quot;&gt;[.tk .ml .ga .cf .gq]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://my.freenom.com/domains.php&quot;&gt;查询一个你想要的域名&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 选择一个 第一个已经有人用了 那就是我 = =&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后 checkout&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择时间&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填写信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 My Domains&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看你的域名列表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功了~&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cname&quot;&gt;添加CNAME文件&lt;/h3&gt;

&lt;p&gt;在你的github pages项目根目录上新建一个CNAME文件，在CNAME文件上编辑刚才申请到的域名，比如 yoruo.tk ，那么我就写上 yoruo.tk (推荐)，当然你也可以写 www.yoruo.tk ，两种写法处理方式不同：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你写的是 yoruo.tk ，那么 www.yoruo.tk 就会指向 yoruo.tk&lt;/li&gt;
  &lt;li&gt;如果你写的是 www.yoruo.tk k ,那么 yoruo.tk 就会指向 www.yoruo.tk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，两种写法都不需要在前面加 http 。&lt;/p&gt;

&lt;p&gt;引用这篇 &lt;a href=&quot;http://www.tuicool.com/articles/NrUrY33&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;dnspoda&quot;&gt;在DNSPod添加A记录&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;然后进入管理中心，选择添加域名。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为域名添加记录，这里的NS记录是自动生成，不用修改，因为我们需要我们的网站可以通过 yoruo.tk 和 www.yoruo.tk 都能访问，所以需要添加两组A记录。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么  &lt;code class=&quot;highlighter-rouge&quot;&gt; 192.30.252.153&lt;/code&gt;  和  &lt;code class=&quot;highlighter-rouge&quot;&gt; 192.30.252.154 &lt;/code&gt; ，因为这是github pages官网说的咯。网上有些人说A记录是 ping xxx.github.io 之后的IP地址，这些都是不可信的。&lt;/p&gt;

&lt;p&gt;但是你可能会奇怪，每个人都是这两个IP地址的话，那么Github怎么知道我的域名 yoruo.tk 和 www.yoruo.tk 对应的是 lxcsjk.github.io 而不是其他人的github pages呢？答案就在上一步操作中的CNAME文件，这里指定了其所对应的域名，github会自动处理，将两者对应起来。&lt;/p&gt;

&lt;p&gt;另外，如果你添加CNAME记录把域名指向 xxx.github.io 的话，也会成功(网上某些教程就是这么做的)。但是官方是不推荐最终做法的，因为可能会”导致其他服务出现问题”。&lt;/p&gt;

&lt;p&gt;引用这篇 &lt;a href=&quot;http://www.tuicool.com/articles/NrUrY33&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;dns&quot;&gt;修改域名的DNS&lt;/h3&gt;

&lt;p&gt;到&lt;a href=&quot;https://my.freenom.com/clientarea.php?action=domains&quot;&gt;域名注册网站&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后 
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填上 DNSPod 的DNS地址 等待DNS服务器刷新 应该很快 我当时几分钟就好了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161127-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后打开你的博客 开始书写所见所想吧。&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Nov 2016 20:40:03 +0800</pubDate>
        <link>http://localhost:4000/2016/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%9A%84/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%9A%84/</guid>
        
        <category>博客</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>h5上传图片压缩包服务端解压并上传图片</title>
        <description>&lt;p&gt;CMS后台有上传多个图片的需求，多个图片上传也一样麻烦。就想做个上传压缩包服务端解压上传的东西。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;页面&lt;/h3&gt;

&lt;p&gt;使用h5的上传api&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 	  /*
             *
             * name: 上传字段标示
             postUrl: 文件数据处理URL
             onClientAbort: 读取操作终止时调用
             onClientError: 出错时调用
             onClientLoad: 读取操作成功时调用
             onClientLoadEnd: 无论是否成功，读取完成时调用。通常在onload和onerror后调用
             onClientLoadStart: 读取将要开始时调用
             onClientProgress: 数据在读取过程中周期性调用
             onServerAbort: post操作结束时调用
             onServerError: 错误发生时调用
             onServerLoad: post操作成功时调用
             onServerLoadStart: post数据将要开始时调用
             onServerProgress: 数据正在被post的过程中周期性调用
             onServerReadyStateChange: 一个javascript功能对象无论任何时候readyState属性变化时调用。callback由用户界面现成调用。
             *
             *
             * */

            $(&quot;#uploadZip&quot;).html5Uploader({
                url: &quot;rest/material/uploadZip&quot;,
                onSuccess: function (e, file, response) {
                    var res = JSON.parse(response);
                    if (res == &quot;200&quot;) {
                        $.sticky(&quot;已经成功上传并且存入原始素材库！&quot;);
                        swal(&quot;SUCCESS!&quot;, &quot;已经成功上传并且存入原始素材库！&quot;, &quot;success&quot;);
                    } else {
                        $.sticky(&quot;压缩格式错误或压缩过程出现错误&quot;);
                        swal(&quot;OMG!&quot;, &quot;压缩包有错误请重新压缩并重新上传 = = ！！！&quot;, &quot;error&quot;);
                    }
                },
                onClientLoad: function () {
                    $.sticky(&quot;文件读取成功! ! !&quot;);
                },
                onClientLoadEnd: function () {
                    $.sticky(&quot;文件上传完成! ! !&quot;);
                },
                onClientLoadStart: function () {
                    $.sticky(&quot;文件将要开始读取! ! !&quot;);
                },
                onClientProgress: function () {

                },
                onServerError: function () {
                    console.log(11111111 + &quot;========&quot;)
                },
                onServerProgress: function () {
                    $.sticky(&quot;文件正在上传! ! !&quot;);
                }
            });

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;用了一些美化过的弹窗控件&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.dglives.com/demo/sweetalert-master/example/&quot;&gt;SweetAlert&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引入js就行了。&lt;/p&gt;

&lt;p&gt;后台模板之前常用&lt;a href=&quot;https://github.com/bopoda/ace&quot;&gt;ACE&lt;/a&gt;的。
扣下来改吧改吧。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;服务端&lt;/h3&gt;

&lt;p&gt;服务端用的Java写的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    @Transactional
    @RequestMapping(value = &quot;uploadZip&quot;, method = RequestMethod.POST)
    public Map&amp;lt;String, Object&amp;gt; uploadZip(HttpServletRequest request) throws Exception {

        Map&amp;lt;String, Object&amp;gt; result = new HashMap&amp;lt;&amp;gt;();
        User user = GrantedFilter.threadLocal.get();
        final Integer userId = user.getId();

        Uploader uploader = new Uploader(request);
        // 解压
        final File[] fileList = uploader.uploadMaterialZip();
        // 有时候压缩会出问题  Mac 和 Windows 
        if (fileList.length &amp;lt; 1 || fileList.length&amp;gt;1?fileList[1].isDirectory():fileList[0].isDirectory()) {
            File f = null;
            try {
                f = new File(fileList[0].getParent());
                deleteFile(f);
            } catch (Exception e) {

            }
            result.put(&quot;code&quot;, &quot;400&quot;);
            return result;
        } else {
            threadPoolTaskExecutor.execute(new Runnable() {
                @Override
                public void run() {
                    String temp = fileList[0].getParent();
                    for (File file : fileList) {
                        if (file.getName().endsWith(&quot;.gif&quot;)||file.getName().endsWith(&quot;.GIF&quot;)) {
                            UFileRequest uFileRequest = new UFileRequest();
                            String gifKey = RandomStringUtils.randomAlphanumeric(32) + &quot;.gif&quot;;
                            uFileRequest.setBucketName(SysConfigDao.getValue(SysConfig.otherConfig, &quot;ufile_bucket&quot;));
                            uFileRequest.setFilePath(file.getPath());
                            uFileRequest.setKey(gifKey);
                            uFileAPI.putFile(uFileRequest);
                            String url = uFileAPI.getDownloadUrl(uFileRequest, 0, false);
                            MaterialRaw materialRaw = new MaterialRaw();
                            materialRaw.setTag(&quot;3&quot;);
                            materialRaw.setGifurl(url);
                            materialRaw.setCreateAt(new Date());
                            materialRaw.setStatus(&quot;t&quot;);
                            materialRaw.setChannl(&quot;r&quot;);
                            try {
                                materialRaw.setMd5(MD5Util.getMd5ByFile(file));
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            }
                            materialRaw.setSize((int) file.length());
                            materialRaw.setCreateBy(userId);
                            try {
                                materialRaw.setTitle(file.getName().substring(0, file.getName().lastIndexOf(&quot;.gif&quot;)));
                            } catch (Exception e) {
                                materialRaw.setTitle(file.getName().substring(0, file.getName().lastIndexOf(&quot;.GIF&quot;)));
                            }
                            materialRawDao.save(materialRaw);
                        }
                        file.delete();
                    }
                    File f = new File(temp);
                    deleteFile(f);
                }
            });
        }
        result.put(&quot;code&quot;, &quot;200&quot;);
        return result;
    }


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解压的Util类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public File[] uploadMaterialZip() throws Exception {
        originalName = request.getHeader(&quot;X-File-Name&quot;);
        type = FileUtil.getFileExt(originalName);
        if (!&quot;.zip&quot;.equals(type.toLowerCase())) {
            throw new BadRequestException(&quot;格式错误！&quot;);
        }
        if (request.getContentLength() / 1024000 &amp;gt; 100) {
            throw new BadRequestException(&quot;文件太大！&quot;);
        }
        fileName = Util.RunTimeSequence() + type;
        path = DateUtil.zipDateFormat(new Date()) + File.separator + fileName;
        File file = new File(savePath + File.separator + path);
        file.getParentFile().mkdirs();
        try (InputStream is = request.getInputStream();
             FileOutputStream fos = new FileOutputStream(file)) {
            IOUtils.copy(is, fos);
            size = file.length();
        }
        String str = savePath + File.separator + System.currentTimeMillis();
        File dir = new File(str);
        if (!dir.exists() || !dir.isDirectory()) {
            dir.mkdirs();
        }
        String temp = savePath + File.separator + DateUtil.zipDateFormat(new Date()) + File.separator;
        // 加压的工具类
        DeCompressUtil.deCompress(savePath + File.separator + path, str, temp);
        File gifFile = new File(str);
        File[] fileList = gifFile.listFiles();
        if (fileList.length&amp;lt;1){
            gifFile.delete();
        }
        return fileList;
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解压&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.an.core.utils.zip;

import com.an.core.exception.BadRequestException;
import de.innosystec.unrar.Archive;
import de.innosystec.unrar.rarfile.FileHeader;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Expand;

import java.io.File;
import java.io.FileOutputStream;

public class DeCompressUtil {
    /**
     * 解压zip格式压缩包
     * 对应的是ant.jar
     */
    private static void unzip(String sourceZip, String destDir, String temp) throws Exception {
        try {
            Project p = new Project();
            Expand e = new Expand();
            e.setProject(p);
            e.setSrc(new File(sourceZip));
            e.setOverwrite(false);
            e.setDest(new File(destDir));
           /*
           ant下的zip工具默认压缩编码为UTF-8编码，
           而winRAR软件压缩是用的windows默认的GBK或者GB2312编码
           所以解压缩时要制定编码格式
           */

            try {
                e.setEncoding(&quot;GBK&quot;);
                e.execute();
            } catch (Exception e1) {
                e.setEncoding(&quot;UTF-8&quot;);
                e.execute();
            }
            File zipFile = new File(sourceZip);
            File zipPath = new File(temp);
            zipFile.delete();
            zipPath.delete();

        } catch (Exception e) {
            throw new BadRequestException(e);
        }
    }

    /**
     * 解压rar格式压缩包。
     * 对应的是java-unrar-0.3.jar，但是java-unrar-0.3.jar又会用到commons-logging-1.1.1.jar
     */
    private static void unrar(String sourceRar, String destDir, String temp) throws Exception {
        Archive a = null;
        FileOutputStream fos = null;
        try {
            a = new Archive(new File(sourceRar));
            FileHeader fh = a.nextFileHeader();
            while (fh != null) {
                if (!fh.isDirectory()) {
                    //1 根据不同的操作系统拿到相应的 destDirName 和 destFileName
                    String compressFileName = fh.getFileNameString().trim();
                    String destFileName = &quot;&quot;;
                    String destDirName = &quot;&quot;;
                    //非windows系统
                    if (File.separator.equals(&quot;/&quot;)) {
                        destFileName = destDir + compressFileName.replaceAll(&quot;\\\\&quot;, &quot;/&quot;);
                        destDirName = destFileName.substring(0, destFileName.lastIndexOf(&quot;/&quot;));
                        //windows系统
                    } else {
                        destFileName = destDir + compressFileName.replaceAll(&quot;/&quot;, &quot;\\\\&quot;);
                        destDirName = destFileName.substring(0, destFileName.lastIndexOf(&quot;\\&quot;));
                    }
                    //2创建文件夹
                    File dir = new File(destDirName);
                    if (!dir.exists() || !dir.isDirectory()) {
                        dir.mkdirs();
                    }
                    //3解压缩文件
                    fos = new FileOutputStream(new File(destFileName));
                    a.extractFile(fh, fos);
                    fos.close();
                    fos = null;
                }
                fh = a.nextFileHeader();
            }
            a.close();
            a = null;
        } catch (Exception e) {
            throw e;
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (a != null) {
                try {
                    a.close();
                    a = null;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 解压缩
     */
    public static void deCompress(String sourceFile, String destDir, String temp) throws Exception {
        //保证文件夹路径最后是&quot;/&quot;或者&quot;\&quot;
        char lastChar = destDir.charAt(destDir.length() - 1);
        if (lastChar != '/' &amp;amp;&amp;amp; lastChar != '\\') {
            destDir += File.separator;
        }
        //根据类型，进行相应的解压缩
        String type = sourceFile.substring(sourceFile.lastIndexOf(&quot;.&quot;) + 1);
        if (!&quot;.zip&quot;.equals(type.toLowerCase())) {
            DeCompressUtil.unzip(sourceFile, destDir, temp);
        } else if (type.equals(&quot;rar&quot;)) {
            DeCompressUtil.unrar(sourceFile, destDir, temp);
        } else {

        }
    }
} 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;删除文件夹下面的所有内容&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	/**
	 * 删除文件夹所有的文件和文件夹
	 *
	 * @param file
     */
	public static void deleteFile(File file){
		if(file.isFile()){
			file.delete();
			return;
		}
		if(file.isDirectory()){
			File[] childFile = file.listFiles();
			if(childFile == null || childFile.length == 0){
				file.delete();
				return;
			}
			for(File f : childFile){
				RecursionDeleteFile(f);
			}
			file.delete();
		}
	}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之前有找过一个&lt;a href=&quot;http://download.csdn.net/detail/clyao_123456/7624815&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://oh6uhie7j.bkt.clouddn.com/MyUpload.zip&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;希望对你有帮助 😂😂😂。&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Nov 2016 19:40:03 +0800</pubDate>
        <link>http://localhost:4000/2016/11/H5%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%8C%85,%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%A7%A3%E5%8E%8B%E4%B8%8A%E4%BC%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/H5%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%8C%85,%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%A7%A3%E5%8E%8B%E4%B8%8A%E4%BC%A0/</guid>
        
        <category>java</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>IDEA maven 项目打包 jdk版本问题</title>
        <description>&lt;p&gt;之前在使用Maven构建的项目中打包总是报错。
本机是  &lt;code class=&quot;highlighter-rouge&quot;&gt;jdk1.7.0_79&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打包确是1.5&lt;/p&gt;

&lt;p&gt;那么要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;setting.xml&lt;/code&gt;  的  &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt;  节点中加这么一段配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;profile&amp;gt; 
  &amp;lt;id&amp;gt;jdk17&amp;lt;/id&amp;gt;  
  &amp;lt;activation&amp;gt; 
    &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;  
    &amp;lt;jdk&amp;gt;1.7&amp;lt;/jdk&amp;gt; 
  &amp;lt;/activation&amp;gt;  
  &amp;lt;properties&amp;gt; 
    &amp;lt;maven.compiler.source&amp;gt;1.7&amp;lt;/maven.compiler.source&amp;gt;  
    &amp;lt;maven.compiler.target&amp;gt;1.7&amp;lt;/maven.compiler.target&amp;gt;  
    &amp;lt;maven.compiler.compilerVersion&amp;gt;1.7&amp;lt;/maven.compiler.compilerVersion&amp;gt; 
  &amp;lt;/properties&amp;gt; 
&amp;lt;/profile&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在IDEA 勾选上这个&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161125-0.png&quot; alt=&quot;勾选&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再执行编译即可&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Nov 2016 15:48:03 +0800</pubDate>
        <link>http://localhost:4000/2016/11/maven%E6%89%93%E5%8C%85%E6%97%B6jdk%E7%89%88%E6%9C%AC%E9%94%99%E8%AF%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/maven%E6%89%93%E5%8C%85%E6%97%B6jdk%E7%89%88%E6%9C%AC%E9%94%99%E8%AF%AF/</guid>
        
        <category>maven</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
