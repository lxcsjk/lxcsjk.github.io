<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YoRuo:想变得更好</title>
    <description>欢迎来到我的Blog~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 09 Feb 2017 15:55:26 +0800</pubDate>
    <lastBuildDate>Thu, 09 Feb 2017 15:55:26 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>iOS - 打ipa包和提交AppStore等事宜</title>
        <description>&lt;p&gt;整理一下关于打ipa包和提交AppStore一些琐碎简单又可能会有点烦人的流程吧…就是这样 = =&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;准备工作&lt;/h3&gt;

&lt;p&gt;首先你需要有一个苹果的开发者帐号，一个Mac系统。&lt;/p&gt;

&lt;p&gt;如果没有帐号可以在打开&lt;a href=&quot;http://developer.apple.com/&quot;&gt;http://developer.apple.com/&lt;/a&gt;申请加入苹果的开发者计划。支付99美元每年，怎么申请网上有详细的介绍，在此不多做介绍。&lt;/p&gt;

&lt;p&gt;如果你已经有了一个开发者账号，打开 &lt;a href=&quot;http://developer.apple.com/&quot;&gt;http://developer.apple.com/&lt;/a&gt; 并登录到苹果Account，见下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-104236@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-104815@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;点击右边的那个。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-105231@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;appid&quot;&gt;申请AppId&lt;/h3&gt;

&lt;p&gt;点击➕号如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-110648@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-110715@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-110853@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击 &lt;strong&gt;continue&lt;/strong&gt; 即可&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;申请发布证书&lt;/h3&gt;

&lt;p&gt;打开 &lt;strong&gt;钥匙串访问&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在下图所示的界面，你的电子邮件地址：填你开发者账号的电子邮件地址，常用名称，默认就好，CA空，选择保存到磁盘，点击”继续”：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-112002@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-112328@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看一下桌面，会发现多了一个 &lt;strong&gt;CertificateSigningRequest.certSigningRequest&lt;/strong&gt; 的证书请求文件。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wwdr&quot;&gt;安装WWDR证书&lt;/h3&gt;

&lt;p&gt;点击左边 Certificates 中的 Production ，再点击右边的➕号&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-113013@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-113155@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-113201@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 Choose File 选择我们前面生成在桌面的证书请求文件&lt;/p&gt;

&lt;p&gt;然后点击 &lt;strong&gt;Generate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;然后 点击 &lt;strong&gt;Download&lt;/strong&gt; 下载后双击 即可添加到钥匙串&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;provisioning&quot;&gt;生成Provisioning文件&lt;/h3&gt;

&lt;p&gt;左边选择 Provisioning Profiles 选项下的 Distribution，来生成一个发布的准备文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-120215@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-120301@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-120331@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击下面的 &lt;strong&gt;Continue&lt;/strong&gt; 就可以了&lt;/p&gt;

&lt;p&gt;等待几秒钟，Provisioning就可以下载了.&lt;/p&gt;

&lt;p&gt;下载后双击添加到本地开发者账号中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-121009@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ipa&quot;&gt;打ipa包&lt;/h3&gt;

&lt;p&gt;打开 Xcode 选择对应的 &lt;strong&gt;Provisioning&lt;/strong&gt; 如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-122612@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;确定这个地方不是模拟器和真机&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-122650@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;确定是发布版本不是debug不然包体积会很大&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-122736@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-122756@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后 点击 &lt;strong&gt;Product -&amp;gt; Archive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;编译成功后，会弹出这个界面。如果失败请查看之前的哪一步出现了错误。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-123606@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-123615@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;选择一个开发者账号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-123634@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;点击导出&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-123701@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-123713@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保存到硬盘。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;itunes-connect&quot;&gt;上传到 iTunes Connect&lt;/h3&gt;

&lt;p&gt;打开 &lt;strong&gt;Application Loader&lt;/strong&gt; (如果没安装去iTunes Connect寻找链接)&lt;/p&gt;

&lt;h4 id=&quot;itunes-connectapp-bundle-identifier&quot;&gt;注意 上传之前在iTunes Connect必须已经创建好你的app 标识就是Bundle Identifier&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;选取ipa包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-124618@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-124653@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里需要等待一些时间&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-124710@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170209-124808@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更改一些build的版本号重新打包就可以了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ipa包检测通过后就能在iTunes Connect中相应的app清单中选择。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这仅仅是发布到App Store的流程肯定是不够，还有 关于推送证书的一些小坑 and 打测试ipa包到蒲公英或者PRE这一类分发平台的流程稍后继续。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 09 Feb 2017 10:00:03 +0800</pubDate>
        <link>http://localhost:4000/2017/02/iOS%E6%89%93ipa%E5%8C%85%E6%8F%90%E4%BA%A4AppStore%E7%AD%89%E4%BA%8B%E5%AE%9C/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/iOS%E6%89%93ipa%E5%8C%85%E6%8F%90%E4%BA%A4AppStore%E7%AD%89%E4%BA%8B%E5%AE%9C/</guid>
        
        <category>AppStore</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>学习资源整理</title>
        <description>&lt;h3 id=&quot;jdk&quot;&gt;JDK&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;JDK1.7中文注解 &lt;a href=&quot;https://github.com/ZhaoX/jdk-1.7-annotated&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http-caching &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;spring&quot;&gt;Spring&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;张开涛的博客 &lt;a href=&quot;http://jinnianshilongnian.iteye.com/&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mybatis&quot;&gt;MyBatis&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对Mybatis的学习非常有帮助 (非常详细有分析源码)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;http://www.mybatis.tk&lt;/strong&gt;	&lt;a href=&quot;http://www.mybatis.tk&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;spring-boot&quot;&gt;Spring-Boot&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;官方文档&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;https://github.com/spring-projects/spring-boot&lt;/strong&gt;	&lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;大牛翻译&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;https://github.com/qibaoguang&lt;/strong&gt;		&lt;a href=&quot;https://github.com/qibaoguang/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;官方文档PDF(2.0.0.BUILD-SNAPSHOT) &lt;a href=&quot;http://oh6uhie7j.bkt.clouddn.com/spring-boot-reference.pdf&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;翻译后中文PDF(1.4.1.RELEASE) &lt;a href=&quot;http://oh6uhie7j.bkt.clouddn.com/spring-boot-reference-guide-zh.pdf&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;插件集成博客 &lt;a href=&quot;http://blog.csdn.net/column/details/spring-boot.html&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;配置filter,listener,servlet &lt;a href=&quot;http://blog.csdn.net/yxsimple/article/details/46771123&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;小工具&lt;/h3&gt;

&lt;p&gt;内网映射 &lt;a href=&quot;https://natapp.cn/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;极客学院wiki &lt;a href=&quot;http://wiki.jikexueyuan.com/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;汉语言处理包 &lt;a href=&quot;https://github.com/hankcs/HanLP&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;p&gt;螃蟹的博客 &lt;a href=&quot;http://www.pangxie.space&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大桥下的蜗牛 &lt;a href=&quot;https://blog.lab99.org&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;镜像库 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker — 从入门到实践 &lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网易蜂巢 &lt;a href=&quot;https://c.163.com/hub#/m/home/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker问答录 &lt;a href=&quot;https://blog.lab99.org/post/docker-2016-07-14-faq.html#docker-push-dao-si-you-registry-zong-shi-bu-cheng-gong-zen-me-ban&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;swift&quot;&gt;Swift&lt;/h3&gt;

&lt;p&gt;翻译组 &lt;a href=&quot;http://swift.gg/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;java&quot;&gt;Java&lt;/h3&gt;

&lt;p&gt;赵鑫 &lt;a href=&quot;http://zhaox.github.io/archive&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios&quot;&gt;iOS&lt;/h3&gt;

&lt;p&gt;插件库 &lt;a href=&quot;http://github.ibireme.com/github/list/ios/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;唐巧的技术博客 &lt;a href=&quot;http://blog.devtang.com/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;刘坤的技术博客 &lt;a href=&quot;https://blog.cnbluebox.com/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Feb 2017 02:00:03 +0800</pubDate>
        <link>http://localhost:4000/2017/02/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</guid>
        
        <category>学习</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>POI导入Excel数据常用API</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_91c0fdb50101kfd4.html&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;poi&quot;&gt;POI简介&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;hssf&quot;&gt;HSSF概况&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HSSF 是Horrible SpreadSheet Format的缩写，通过HSSF，你可以用纯Java代码来读取、写入、修改Excel文件。HSSF 为读取操作提供了两类API：usermodel和eventusermodel，即“用户模型”和“事件-用户模型”。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;poi-excel&quot;&gt;POI EXCEL文档结构类&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HSSFWorkbook excel文档对象&lt;/li&gt;
  &lt;li&gt;HSSFSheet excel的sheet HSSFRow excel的行&lt;/li&gt;
  &lt;li&gt;HSSFCell excel的单元格 HSSFFont excel字体&lt;/li&gt;
  &lt;li&gt;HSSFName 名称 HSSFDataFormat 日期格式&lt;/li&gt;
  &lt;li&gt;HSSFHeader sheet头&lt;/li&gt;
  &lt;li&gt;HSSFFooter sheet尾&lt;/li&gt;
  &lt;li&gt;HSSFCellStyle cell样式&lt;/li&gt;
  &lt;li&gt;HSSFDateUtil 日期&lt;/li&gt;
  &lt;li&gt;HSSFPrintSetup 打印&lt;/li&gt;
  &lt;li&gt;HSSFErrorConstants 错误信息表&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;excel&quot;&gt;EXCEL常用操作方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;建立Excel常用对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POIFSFileSystem fs = newPOIFSFileSystem(new FileInputStream(&quot;d:/test.xls&quot;));
	
//得到Excel工作簿对象
HSSFWorkbook wb = new HSSFWorkbook(fs);
	
//得到Excel工作表对象
HSSFSheet sheet = wb.getSheetAt(0);
	
//得到Excel工作表的行
HSSFRow row = sheet.getRow(i);

//得到Excel工作表指定行的单元格
HSSFCell cell = row.getCell((short) j);

//得到单元格样式
cellStyle = cell.getCellStyle();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;建立Excel常用对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建Excel工作簿对象
HSSFWorkbook wb = new HSSFWorkbook();

//创建Excel工作表对象
HSSFSheet sheet = wb.createSheet(&quot;new sheet&quot;);

//创建Excel工作表的行
HSSFRow row = sheet.createRow((short)0);

//创建单元格样式
cellStyle = wb.createCellStyle();

//创建Excel工作表指定行的单元格
row.createCell((short)0).setCellStyle(cellStyle);

//设置Excel工作表的值
row.createCell((short)0).setCellValue(1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置sheet名称和单元格内容&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wb.setSheetName(1, &quot;第一张工作表&quot;,HSSFCell.ENCODING_UTF_16);
            
cell.setEncoding((short) 1);   
   
cell.setCellValue(&quot;单元格内容&quot;);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;取得sheet的数目&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wb.getNumberOfSheets();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;根据index取得sheet对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFSheet sheet = wb.getSheetAt(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;取得有效的行数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int rowcount = sheet.getLastRowNum();   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;取得一行的有效单元格个数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;row.getLastCellNum();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;单元格值类型读写&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//设置单元格为STRING类型
cell.setCellType(HSSFCell.CELL_TYPE_STRING);
	
//读取为数值类型的单元格内容
cell.getNumericCellValue();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置列宽、行高&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sheet.setColumnWidth((short)column,(short)width);

row.setHeight((short)height);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;添加区域，合并单元格&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//合并从第rowFrom行columnFrom列
Region region = new Region((short)rowFrom,(short)columnFrom,(short)rowTo  
(short)columnTo);

//到rowTo行columnTo的区域
sheet.addMergedRegion(region);

//得到所有区域       
sheet.getNumMergedRegions()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;保存Excel文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FileOutputStream fileOut = new FileOutputStream(path); 
wb.write(fileOut); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;根据单元格不同属性返回字符串数值&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public String getCellStringValue(HSSFCell cell) {
        String cellValue = &quot;&quot;;
        switch (cell.getCellType()) {
            case HSSFCell.CELL_TYPE_STRING://字符串类型 
                cellValue = cell.getStringCellValue();
                if (cellValue.trim().equals(&quot;&quot;) || cellValue.trim().length() &amp;lt;= 0)
                    cellValue = &quot;&quot;;
                break;
            case HSSFCell.CELL_TYPE_NUMERIC://数值类型 
                cellValue = String.valueOf(cell.getNumericCellValue());
                break;
            case HSSFCell.CELL_TYPE_FORMULA://公式 
                cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
                cellValue = String.valueOf(cell.getNumericCellValue());
                break;
            case HSSFCell.CELL_TYPE_BLANK:
                cellValue = &quot;&quot;;
                break;
            case HSSFCell.CELL_TYPE_BOOLEAN:
                break;
            case HSSFCell.CELL_TYPE_ERROR:
                break;
            default:
                break;
        }
        return cellValue;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;保存Excel文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFCellStyle style = wb.createCellStyle();
//下边框
style.setBorderBottom(HSSFCellStyle.BORDER_DOTTED);
//左边框  
style.setBorderLeft(HSSFCellStyle.BORDER_DOTTED);
//右边框
style.setBorderRight(HSSFCellStyle.BORDER_THIN);
//上边框
style.setBorderTop(HSSFCellStyle.BORDER_THIN);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置字体和内容位置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFFont f  = wb.createFont();
//字号
f.setFontHeightInPoints((short) 11);
//加粗
f.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);
style.setFont(f);
//左右居中
style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
//上下居中
style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
//单元格内容的旋转的角度
style.setRotation(short rotation);

HSSFDataFormat df = wb.createDataFormat();
//设置单元格数据格式
style1.setDataFormat(df.getFormat(&quot;0.00%&quot;));
//给单元格设公式    
cell.setCellFormula(string);
//单元格内容的旋转的角度     
style.setRotation(short rotation);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;插入图片&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//先把读进来的图片放到一个ByteArrayOutputStream中，以便产生ByteArray       
ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();      
BufferedImage bufferImg = ImageIO.read(new File(&quot;ok.jpg&quot;));      
ImageIO.write(bufferImg,&quot;jpg&quot;,byteArrayOut);      
//读进一个excel模版       
FileInputStream fos = new FileInputStream(filePathName+&quot;/stencil.xlt&quot;);       
fs = new POIFSFileSystem(fos);      
//创建一个工作薄       
HSSFWorkbook wb = new HSSFWorkbook(fs);      
HSSFSheet sheet = wb.getSheetAt(0);      
HSSFPatriarch patriarch = sheet.createDrawingPatriarch();      
HSSFClientAnchor anchor = new HSSFClientAnchor(0,0,1023,255,(short) 0,0,(short)10,10);           
patriarch.createPicture(anchor , wb.addPicture(byteArrayOut.toByteArray(),HSSFWorkbook.PICTURE_TYPE_JPEG));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;调整工作表位置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFWorkbook wb = new HSSFWorkbook();     
HSSFSheet sheet = wb.createSheet(&quot;format sheet&quot;);     
HSSFPrintSetup ps = sheet.getPrintSetup();     
sheet.setAutobreaks(true);     
ps.setFitHeight((short)1);     
ps.setFitWidth((short)1);   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置打印区域&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFSheet sheet = wb.createSheet(&quot;Sheet1&quot;);     
wb.setPrintArea(0, &quot;$A$1:$C$2&quot;);   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;标注脚注&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFSheet sheet = wb.createSheet(&quot;format sheet&quot;);     
HSSFFooter footer = sheet.getFooter()     
footer.setRight( &quot;Page &quot; + HSSFFooter.page() + &quot; of &quot; + HSSFFooter.numPages() );  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在工作单中清空行数据，调整行位置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFWorkbook wb = new HSSFWorkbook();     
HSSFSheet sheet = wb.createSheet(&quot;row sheet&quot;);     
// Create various cells and rows for spreadsheet.      
// Shift rows 6 - 11 on the spreadsheet to the top (rows 0 - 5)      
sheet.shiftRows(5, 10, -5); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;选中指定的工作表&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFSheet sheet = wb.createSheet(&quot;row sheet&quot;);     
heet.setSelected(true); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;工作表的放大缩小&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFSheet sheet1 = wb.createSheet(&quot;new sheet&quot;);     
sheet1.setZoom(1,2);   // 50 percent magnification   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;头注和脚注&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFSheet sheet = wb.createSheet(&quot;new sheet&quot;);     
HSSFHeader header = sheet.getHeader();     
header.setCenter(&quot;Center Header&quot;);     
header.setLeft(&quot;Left Header&quot;);     
header.setRight(HSSFHeader.font(&quot;Stencil-Normal&quot;, &quot;Italic&quot;) +     
HSSFHeader.fontSize((short) 16) + &quot;Right w/ Stencil-Normal Italic font and size 16&quot;);    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;自定义颜色&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFCellStyle style = wb.createCellStyle();     
style.setFillForegroundColor(HSSFColor.LIME.index);     
style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);     
HSSFFont font = wb.createFont();     
font.setColor(HSSFColor.RED.index);     
style.setFont(font);     
cell.setCellStyle(style);    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;小结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;设置不显示excel网格线 &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sheet.setDisplayGridlines(false);
其中sheet是Sheet对象 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置excel单元格中的内容换行 &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cellStyle.setWrapText(true);

其中cellStyle是WorkBook创建的CellStyle对象,然后将cellStyle设置到要换行的Cell对象,最后在要换行的对象(一般为字符串)加入&quot;/r/n&quot;。如  topTile.append(&quot;/r/n&quot; +&quot;cellContent&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;单元格的合并 &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sheet.addMergedRegion(new CellRangeAddress(0, 4, 0, 2));

本示例为合并4行2列
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置页眉和页脚的页数 &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFHeader header = sheet.getHeader(); 
 header.setCenter(&quot;Center Header&quot;);
 header.setLeft(&quot;Left Header&quot;);
 header.setRight(HSSFHeader.font(&quot;Stencil-Normal&quot;, &quot;Italic&quot;) + HSSFHeader.fontSize((short) 16) + &quot;Right w/ Stencil-Normal Italic font and size 16&quot;);
 HSSFFooter footer = (HSSFFooter )sheet.getFooter()  footer.setRight( &quot;Page &quot; + HSSFFooter.page() + &quot; of &quot; + HSSFFooter.numPages() );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使得一个Sheet适合一页 &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sheet.setAutobreaks(true); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置放大属性 &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sheet.setZoom(3,4);
Zoom被明确为一个分数，例如下面的75%使用3作为分子，4作为分母
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置打印&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFPrintSetup print = (HSSFPrintSetup) sheet.getPrintSetup();
 print.setLandscape(true);//设置横向打印
 print.setScale((short) 70);//设置打印缩放70%
 print.setPaperSize(HSSFPrintSetup.A4_PAPERSIZE);//设置为A4纸张 
 print.setLeftToRight(true);//設置打印顺序先行后列,默认为先列行
             print.setFitHeight((short) 10);设置缩放调整为10页高 
 print.setFitWidth((short) 10);设置缩放调整为宽高 
 sheet.setAutobreaks(false); 
 if (i != 0 &amp;amp;&amp;amp; i % 30 == 0) {
     sheet.setRowBreak(i);//设置每30行分页打印
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;反复的行和列&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HSSFWorkbook wb = new HSSFWorkbook();  wb.setRepeatingRowsAndColumns(0, 0, 12, 1, 6);
//设置1到12列,行1到6每一页重复打印 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;调整单元格宽度&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sheet.setAutobreaks(true);
sheet.setColumnWidth((short)i,colsWidth[i]);
//设定单元格长度
 sheet.autoSizeColumn((short) i);
//自动根据长度调整单元格长度 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Feb 2017 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2017/02/%E5%AF%BC%E5%85%A5Excel%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8API/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/%E5%AF%BC%E5%85%A5Excel%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8API/</guid>
        
        <category>POI</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>iOS抓包工具 - Charles</title>
        <description>&lt;p&gt;过年也在家也没啥事情，闲着无聊就整理整理自己学习iOS的经历以及解决的问题and知识点（虽然我很菜😂😂）。温故而知新吧😀😀&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Charles&lt;/strong&gt; 一个网络抓包工具，可以清晰看到网络请求参数值以及返回的response结果。对于日常开发还是非常有帮助的。&lt;/p&gt;

&lt;h3 id=&quot;charles&quot;&gt;安装 Charles&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;有钱请支持正版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://oh6uhie7j.bkt.clouddn.com/charles-proxy-4.0.1.zip&quot;&gt;没钱戳这里(请支持正版)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;拖入  &lt;strong&gt;应用程序&lt;/strong&gt;  即可&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;charles-1&quot;&gt;Charles的简单使用&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;将Charles设置成系统的代理服务器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-193921@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后就可以看到很多网络请求出现在Charles的界面里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-193551@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;显示视图&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Charles提供了两种显示视图的方式，分别为 &lt;strong&gt;Structure&lt;/strong&gt; 和 &lt;strong&gt;Sequence&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;区别如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Structure&lt;/strong&gt; 视图将网络请求按访问的域名分类。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sequence&lt;/strong&gt; 视图将网络请求按访问的时间排序。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面的图为&lt;strong&gt;Structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面的图为&lt;strong&gt;Sequence&lt;/strong&gt;
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-194802@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;单击其中一个网络请求，根据面板上的tag即可在下面空白看到相应的&lt;strong&gt;request&lt;/strong&gt;请求参数和&lt;strong&gt;response&lt;/strong&gt;返回结果了&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;过滤网络请求&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;strong&gt;Sequence&lt;/strong&gt; 视图模式有一个 &lt;strong&gt;Filter&lt;/strong&gt; 的输入框&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-195706@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;另一种方式，选中一个在右键出的下拉菜单中点击 &lt;strong&gt;Focus&lt;/strong&gt;，然后&lt;strong&gt;Filter&lt;/strong&gt; 的输入框后面勾选 &lt;strong&gt;Focused&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-200349@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;strong&gt;Structure&lt;/strong&gt; 视图模式 在菜单栏选择 &lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy-&amp;gt;Recording Settings&lt;/code&gt;，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-200139@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;抓取移动设备上的请求封包&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;设置Charles的代理功能 如图&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-201137@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;手机上的设置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PC和手机最好用同一个网关要方便点，毕竟都是在办公室工作嘛。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;获取到电脑的ip地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-201522@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设置手机的HTTP代理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进入到 “设置” - “无线局域网” - “【你的WiFi名字】旁边的详情”
向下拉到最底，填入你PC的ip和Charles的代理端口号&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/6646E7369EAC5D316F3E2C9AFD4C5513.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择 &lt;strong&gt;Allow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-202158@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在面版将会看到手机发出接受的网络请求了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;https&quot;&gt;抓包HTTPS&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;安装 &lt;strong&gt;Charles&lt;/strong&gt; 的CA证书&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“菜单栏” - “SSL Proxying” - “Install Charles Root Certificate”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-202745@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在钥匙串中可以搜索到
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-202909@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后选中一条 HTTPS 请求，右键选择 &lt;strong&gt;Enable SSL proxy&lt;/strong&gt; 然后就能看到不再乱码的请求信息了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-203656@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;抓包移动设备的SSL请求&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里需要在手机上安装一个证书，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/C140ACC2-C585-4CCA-9CE2-394FCA2B9359.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-203821@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;弹出一个提示告诉你 需要设置代理然后用手机浏览器打开一个地址安装一个证书  &lt;a href=&quot;http://chls.pro/ssl&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/1D32AC22C2B0BF8458259E30A7DF427F.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后和上面一样 &lt;strong&gt;Enable SSL proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;example ~&lt;/p&gt;

&lt;p&gt;抓包keep的小视频&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-205909@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;模拟网络环境差&lt;/h3&gt;

&lt;p&gt;Charles提供这样的支持，只需要更改添加配置与host即可。如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20170122-205122@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;目前常常用到就是这么多~~~ 如果有不足可以看看 &lt;a href=&quot;http://blog.devtang.com/2015/11/14/charles-introduction/&quot;&gt;唐巧大神的博客&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jan 2017 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2017/01/iOS%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7-Charles/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/iOS%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7-Charles/</guid>
        
        <category>Charles</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>2017</title>
        <description>&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2017的目标~~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;16年的有几个还是没完成，特别是体重！！！ 166了 妈惹。 想大一我才120. 😉😉😉&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;今年，本命年。😢😢😢&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Work：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;iOS开发也接触了一段时间，转眼大半年两个app都上了，java有点荒废了，js也进步了。所以在寒假把java的基础复习复习，顺便把项目不完善的地方改改。毕竟寒假在家也没有啥事情。感觉JavaScript真是神奇的语言，慢慢体会其中的精髓。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提到工资了，13k吧，每个月的房贷也不少，感觉拿这个数字不难。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;好吧，那本书还在睡觉，所以还是得好好看看。（以后绝对不会再买实体书有了iPad还是PDF，环保健康！）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Life:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;已经看过了周董的演唱会，如果17年有闲钱的话去旅旅游吧。很久没出去走走了。 暂定  厦门 &amp;amp; 云南 &amp;amp; 内蒙古&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;换个房子住，离地铁近点，租金可能贵点但是要舒服很多，逃离松江，总感觉有点点脏。还是浦东干净舒适。可能去猴子那边小区找个房子，等猴子留学回来还可以蹭蹭饭。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;还是体重体重体重。。 说三遍 = = （PS:我妹说减肥等于整容）换了房子再在咸鱼找个转卡的，去健健身。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2017/01/2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/2017/</guid>
        
        <category>My</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Invalid Bundle. iPad Multitasking support requires these orientations</title>
        <description>&lt;p&gt;前段时间把app适配一下iPad，再提交的时候出了一些问题&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ERROR ITMS-90474: “Invalid Bundle. iPad Multitasking support requires these orientations: ‘UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight’. Found ‘UIInterfaceOrientationPortrait,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight’ in bundle “bundle_Name”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查了一下资料原来是 &lt;strong&gt;ios9 iPad 的分屏适配&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So~
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161224-132228@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次提交一下 OK啦&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/Invalid-Bundle.-iPad-Multitasking-support-requires-these-orientations/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/Invalid-Bundle.-iPad-Multitasking-support-requires-these-orientations/</guid>
        
        <category>iOS</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>PresentViewController 在 iPad 上执行失败</title>
        <description>&lt;p&gt;在选择头像图片的时候 使用  &lt;code class=&quot;highlighter-rouge&quot;&gt;imagePickerController&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [self presentViewController:imagePickerController animated:YES completion:^{
            
  }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;异常信息&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2016-12-20 13:50:23.096416 Training[1963:904966] Warning: Attempt to present &amp;lt;UIImagePickerController: 0x14a9d0c00&amp;gt;  on &amp;lt;MySelfViewController: 0x149d2d480&amp;gt; which is already presenting (null)&lt;/p&gt;

  &lt;p&gt;2016-12-20 13:50:23.106841 Training[1963:904966] [Warning] &amp;lt;_UIPopoverBackgroundVisualEffectView 0x149dcbd40&amp;gt; is being asked to animate its opacity. This will cause the effect to appear broken until opacity returns to 1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;google了一下 找到了解决方法 &lt;a href=&quot;http://stackoverflow.com/questions/32380967/presentviewcontroller-animated-not-displaying-on-ipad&quot;&gt;presentviewcontroller-animated-not-displaying-on-ipad&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    dispatch_async(dispatch_get_main_queue(), ^ {
        [self presentViewController:imagePickerController animated:YES completion:^{
            
        }];
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;但是这是为啥呢 在iPhone上没问题 歪果仁是这样说的 &lt;a href=&quot;http://stackoverflow.com/questions/24854802/presenting-a-view-controller-modally-from-an-action-sheets-delegate-in-ios8-i/24854803#24854803&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The problem seems to come from Apple’s switch to using UIAlertController internally to implement the functionality of alert views and action sheets. The issue is seen mostly on iPad and action sheets, because on iPad, action sheets are presented as a popover within a specified view, and what Apple does is travel the responder chain until it finds a view controller and calls presentViewController:animated:completion: with the internal UIAlertController. The problem is less obvious on iPhone and with alert views, because there Apple actually creates a separate window, an empty view controller and presents the internal UIAlertController on top of that, so it seems to not interfere with other presentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大概意思是这样的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;presentViewController 需要找到一个视图控制器然后执行，在iPhone上，Apple实际上创建了一个单独的窗口，一个空视图控制器，并在其上显示，因此不会干扰其他显示。而iPad上面没有这样做。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Tue, 20 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/PresentViewController-%E5%9C%A8-iPad-%E4%B8%8A%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/PresentViewController-%E5%9C%A8-iPad-%E4%B8%8A%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5/</guid>
        
        <category>iOS</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>录音文件lame转换MP3相关配置</title>
        <description>&lt;p&gt;文件下载整个功能完成了，那么对应的文件上传也跑不了。So~ Look here~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;业务需求是录制音频然后上传到七牛并且Android可以读。&lt;/p&gt;

&lt;p&gt;与安卓沟通了一下统一了mp3格式，大小质量都不错。由于&lt;code class=&quot;highlighter-rouge&quot;&gt;AVAudioRecorder&lt;/code&gt;录音的格式为.caf或者.wav而且很大需要进行转换压缩为MP3格式。这里需要用到三方库 &lt;code class=&quot;highlighter-rouge&quot;&gt;lame&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用lame转换后音频的质量和&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; _recorder = [[AVAudioRecorder alloc] initWithURL:_recordFilePath settings:setting error:NULL];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;里的 &lt;strong&gt;&lt;em&gt;setting&lt;/em&gt;&lt;/strong&gt; 息息相关。 所以整理了两个配置。&lt;/p&gt;

&lt;p&gt;我把这两种的配置写在了工具类所以直接贴代码了~要用的话直接CV大法就可以。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://oh6uhie7j.bkt.clouddn.com/lame.zip&quot;&gt;lame三方库的资源&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;获取转换文件所在文件夹&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)getRecPathUrl{
    NSString *str = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
    
    NSString *recordDir = [str stringByAppendingPathComponent:@&quot;RecordCourse&quot;];
    
    return recordDir;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;获取时间戳用于文件的命名&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)getTimestamp{
    NSDate *nowDate = [NSDate date];
    double timestamp = (double)[nowDate timeIntervalSince1970]*1000;
    long nowTimestamp = [[NSNumber numberWithDouble:timestamp] longValue];
    NSString *timestampStr = [NSString stringWithFormat:@&quot;%ld&quot;,nowTimestamp];
    return timestampStr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;PCM转换MP3配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSDictionary *)getAudioSettingWithPCM {
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    //设置录音格式
    [dic setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
    //设置录音采样率，8000是电话采样率，对于一般录音已经够了
    [dic setObject:@(44100.0) forKey:AVSampleRateKey];
    //设置通道,这里采用双声道
    [dic setObject:@(1) forKey:AVNumberOfChannelsKey];
    //每个采样点位数,分为8、16、24、32
    [dic setObject:@(16) forKey:AVLinearPCMBitDepthKey];
    //是否使用浮点数采样
    [dic setObject:@(YES) forKey:AVLinearPCMIsFloatKey];
    //....其他设置等
    return dic;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CAF转换MP3配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSDictionary *)getAudioSettingWithCAF {
    NSDictionary *setting = [NSDictionary dictionaryWithObjectsAndKeys:
                             [NSNumber numberWithInt:AVAudioQualityMin],
                             AVEncoderAudioQualityKey,
                             [NSNumber numberWithInt:16],
                             AVEncoderBitRateKey,
                             [NSNumber numberWithInt:2],
                             AVNumberOfChannelsKey,
                             [NSNumber numberWithFloat:44100.0],
                             AVSampleRateKey,
                             nil];

    return setting;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;PCM转换MP3的lame方法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)audioPCMtoMP3:(NSString *)wavPath {
    NSString *cafFilePath = wavPath;
    
    NSString *mp3FilePath = [NSString stringWithFormat:@&quot;%@.mp3&quot;,[NSString stringWithFormat:@&quot;%@%@&quot;,[cafFilePath substringToIndex:cafFilePath.length - 4],[self getTimestamp]]];
    
    NSFileManager* fileManager = [NSFileManager defaultManager];
    if([fileManager removeItemAtPath:mp3FilePath error:nil]){
        NSLog(@&quot;删除原MP3文件&quot;);
    }
    @try {
        int read, write;
        FILE *pcm = fopen([cafFilePath cStringUsingEncoding:1], &quot;rb&quot;);  //source 被转换的音频文件位置
        fseek(pcm, 4*1024, SEEK_CUR);                                   //skip file header
        FILE *mp3 = fopen([mp3FilePath cStringUsingEncoding:1], &quot;wb&quot;);  //output 输出生成的Mp3文件位置
        const int PCM_SIZE = 8192;
        const int MP3_SIZE = 8192;
        short int pcm_buffer[PCM_SIZE*2];
        unsigned char mp3_buffer[MP3_SIZE];
        
        lame_t lame = lame_init();
        lame_set_in_samplerate(lame, 22050.0);
        lame_set_VBR(lame, vbr_default);
        lame_init_params(lame);
        
        do {
            read = fread(pcm_buffer, 2*sizeof(short int), PCM_SIZE, pcm);
            if (read == 0)
                write = lame_encode_flush(lame, mp3_buffer, MP3_SIZE);
            else
                write = lame_encode_buffer_interleaved(lame, pcm_buffer, read, mp3_buffer, MP3_SIZE);
            
            fwrite(mp3_buffer, write, 1, mp3);
            
        } while (read != 0);
        
        lame_close(lame);
        fclose(mp3);
        fclose(pcm);
    }
    @catch (NSException *exception) {
        NSLog(@&quot;%@&quot;,[exception description]);
    }
    @finally {
        return mp3FilePath;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CAF转换MP3的lame方法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (NSString *)audioCAFtoMP3:(NSString *)wavPath {
    
    NSString *cafFilePath = wavPath;
    
    NSString *mp3FilePath = [NSString stringWithFormat:@&quot;%@.mp3&quot;,[NSString stringWithFormat:@&quot;%@%@&quot;,[cafFilePath substringToIndex:cafFilePath.length - 4],[self getTimestamp]]];
    
    @try {
        int read, write;
        
        FILE *pcm = fopen([cafFilePath cStringUsingEncoding:1], &quot;rb&quot;);  //source 被转换的音频文件位置
        fseek(pcm, 4*1024, SEEK_CUR);                                   //skip file header
        FILE *mp3 = fopen([mp3FilePath cStringUsingEncoding:1], &quot;wb&quot;);  //output 输出生成的Mp3文件位置
        
        const int PCM_SIZE = 8192;
        const int MP3_SIZE = 8192;
        short int pcm_buffer[PCM_SIZE*2];
        unsigned char mp3_buffer[MP3_SIZE];
        
        lame_t lame = lame_init();
        lame_set_num_channels(lame,1);//设置1为单通道，默认为2双通道
        lame_set_in_samplerate(lame, 44100.0);
        lame_set_VBR(lame, vbr_default);
        
        lame_set_brate(lame,8);
        
        lame_set_mode(lame,3);
        
        lame_set_quality(lame,2);
        
        lame_init_params(lame);
        
        do {
            read = fread(pcm_buffer, 2*sizeof(short int), PCM_SIZE, pcm);
            if (read == 0)
                write = lame_encode_flush(lame, mp3_buffer, MP3_SIZE);
            else
                write = lame_encode_buffer_interleaved(lame, pcm_buffer, read, mp3_buffer, MP3_SIZE);
            
            fwrite(mp3_buffer, write, 1, mp3);
            
        } while (read != 0);
        
        lame_close(lame);
        fclose(mp3);
        fclose(pcm);
    }
    @catch (NSException *exception) {
        NSLog(@&quot;%@&quot;,[exception description]);
    }
    @finally {
        return mp3FilePath;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;两种质量大小不错都可以使用😁😁&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/%E5%BD%95%E9%9F%B3%E6%96%87%E4%BB%B6lame%E8%BD%AC%E6%8D%A2MP3%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/%E5%BD%95%E9%9F%B3%E6%96%87%E4%BB%B6lame%E8%BD%AC%E6%8D%A2MP3%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</guid>
        
        <category>lame</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Mac更新10.12后关机很慢的问题</title>
        <description>&lt;p&gt;之前电脑升级了MacOS Sierra，然后关机都特别慢，起码要20分钟。问了周围朋友有的出现有的没有。今天才知道是因为本地MySQL服务的问题。So那就重新装一个吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;macmysql-&quot;&gt;下载最新mac版本的mysql 地址&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/downloads/file/?id=466265&quot;&gt;mysql-5.7.16-osx10.11-x86_64.dmg&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mysql&quot;&gt;卸载MySQL&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
vim /etc/hostconfig  (and removed the line MYSQLCOM=-YES-)
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这么多rm -rf 不敢写个脚本直接跑。。。 😂😂😂 虽然机器比我靠谱&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mysql-1&quot;&gt;安装MySQL&lt;/h3&gt;

&lt;p&gt;直接安装dmg文件就OK了。&lt;/p&gt;

&lt;p&gt;会出一个提示，root的密码。这之后需要改一下。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2016-12-03T05:27:15.648601Z 1 [Note] A temporary password is generated for root@localhost: 
pju%C!a?t4ek
If you lose this password, please consult the section How to Reset the Root Password in the MySQL reference manual.
You must reset your password using ALTER USER statement before executing this statement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;电脑上有 &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL Workbench&lt;/code&gt; 所以就直接改了 没用命令行了。&lt;/p&gt;

&lt;p&gt;最后Navicat连上了 就OK了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;记得卸载之前保存一下sql脚本来恢复数据&lt;/strong&gt; 😂😂😂&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Dec 2016 20:00:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/Mac%E6%9B%B4%E6%96%B010.12%E5%90%8E%E5%85%B3%E6%9C%BA%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/Mac%E6%9B%B4%E6%96%B010.12%E5%90%8E%E5%85%B3%E6%9C%BA%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        
        <category>Mac</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>FMDB 整理总结</title>
        <description>&lt;p&gt;这几天在写文件下载，断点续传，需要用到FMDB进行数据的管理，等写完也总结一下。&lt;/p&gt;

&lt;p&gt;其实也是这两天才学习 &lt;code class=&quot;highlighter-rouge&quot;&gt;FMDB&lt;/code&gt;，google了一下资料有很多，就去 github 上面先 &lt;a href=&quot;https://github.com/ccgus/fmdb&quot;&gt;Star&lt;/a&gt; 一下&lt;code class=&quot;highlighter-rouge&quot;&gt;FMDB&lt;/code&gt;，发现他&lt;code class=&quot;highlighter-rouge&quot;&gt;README.markdown&lt;/code&gt;写的很详细。然后也看了唐巧大牛的&lt;a href=&quot;http://blog.devtang.com/2012/04/22/use-fmdb/&quot;&gt;技术博客&lt;/a&gt;，写了&lt;a href=&quot;https://github.com/lxcsjk/FMDBDemo&quot;&gt;FMDBDemo&lt;/a&gt;玩玩。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;集成到项目&lt;/h3&gt;

&lt;p&gt;通过 &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; 添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod 'FMDB'&lt;/code&gt; 然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update --verbose --no-repo-update&lt;/code&gt; OK~&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;创建数据库&lt;/h3&gt;

&lt;p&gt;导入 &lt;code class=&quot;highlighter-rouge&quot;&gt;libsqlite3.tbd&lt;/code&gt;  (&lt;code class=&quot;highlighter-rouge&quot;&gt;libsqlite3.0.tbd&lt;/code&gt; 也可以)
&lt;img src=&quot;http://oh6uhie7j.bkt.clouddn.com/QQ20161203-223307@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;引入 &lt;code class=&quot;highlighter-rouge&quot;&gt;#import &quot;FMDB.h&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;创建数据库&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    NSString *doc =[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) lastObject];
    
    fileName = [doc stringByAppendingPathComponent:@&quot;downCourse.sqlite&quot;];
    
    DLog(@&quot;sql文件路径 ： %@&quot;,fileName);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我创建在&lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt;目录下&lt;/p&gt;

&lt;p&gt;关于创建数据库：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;FMDatabase&lt;/code&gt; is created with a path to a SQLite database file. This path can be one of these three:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;A file system path. The file does not have to exist on disk. If it does not exist, it is created for you.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;An empty string (@””). An empty database is created at a temporary location. This database is deleted with the &lt;code class=&quot;highlighter-rouge&quot;&gt;FMDatabase&lt;/code&gt; connection is closed.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. An in-memory database is created. This database will be destroyed with the FMDatabase connection is closed.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思就是&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;建立数据库只需要如下一行即可 , 当该文件不存在时，fmdb 会自己创建一个。如果你传入的参数是空串：@”” ，则 fmdb 会在临时文件目录下创建这个数据库，如果你传入的参数是 NULL，则它会建立一个在内存中的数据库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;打开数据库&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
    	// sql
    }
    [db close];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以了 执行完 注意一定要 &lt;code class=&quot;highlighter-rouge&quot;&gt;[db close]&lt;/code&gt; 关闭数据库&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;创建表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)createTable{
    //    NSFileManager * fileManager = [NSFileManager defaultManager];
    //    if ([fileManager fileExistsAtPath:fileName] == NO) {
    if (!isTableExist) {
        FMDatabase *db = [FMDatabase databaseWithPath:fileName];
        if ([db open]){
            //  创建表
            BOOL result = [db executeUpdate:@&quot;CREATE TABLE 't_down_course' ('id' INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL , 'courseId' INTEGER, 'downPath' VARCHAR(255),'courseInfo' text)&quot;];
            if (result){
                DLog(@&quot;创建表成功&quot;);
                isTableExist = YES;
                [self showAlertWithMessage:@&quot;创建表 --- 成功&quot; completion:nil];
            }else{
                [self showAlertWithMessage:@&quot;创建表 --- 失败&quot; completion:nil];
            }
            [db close];
        }else{
            [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
        }
    }
    //    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建名称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;t_down_course&lt;/code&gt; 的表&lt;/p&gt;

&lt;h5 id=&quot;section-5&quot;&gt;对表的属性怎删改&lt;/h5&gt;

&lt;p&gt;语法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BOOL result = [db executeUpdate:sql]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如需在表中添加列，请使用下列语法:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 ALTER TABLE table_name ADD column_name datatype
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要删除表中的列，请使用下列语法:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 ALTER TABLE table_name DROP COLUMN column_name
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新表中列的属性，请使用下列语法:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 ALTER TABLE table_name MODIFY COLUMN column_name datatype
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-6&quot;&gt;插入数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)addData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    
    NSDictionary *dic = @{
                          @&quot;code&quot;: @0,
                          @&quot;msg&quot;: @&quot;success&quot;,
                          @&quot;data&quot;: @{
                              @&quot;course&quot;: @{
                                  @&quot;id&quot;: @24,
                                  @&quot;crowdId&quot;: @4,
                                  @&quot;ccode&quot;: @&quot;KIa8nNpVmc&quot;,
                                  @&quot;cname&quot;: @&quot;健健康康&quot;,
                                  @&quot;coverImg&quot;: @&quot;http://ocd2lp9uj.bkt.clouddn.com/FaceQ1445612150222.jpg&quot;,
                                  @&quot;description&quot;: @&quot;淋漓尽致&quot;,
                                  @&quot;speaker&quot;: @2,
                                  @&quot;speakerName&quot;: @&quot;刘欣成&quot;,
                                  @&quot;speakerHeadIcon&quot;: @&quot;http://ocd2lp9uj.bkt.clouddn.com/FaceQ1445612150222.jpg&quot;,
                                  @&quot;startTime&quot;: @&quot;2016-10-15 11:21:44&quot;,
                                  @&quot;endTime&quot;: @&quot;2016-10-15 11:26:50&quot;,
                                  @&quot;liveStatus&quot;: @&quot;2&quot;,
                                  @&quot;saveStatus&quot;: @&quot;2&quot;
                              }
                          }
                    };
    NSString *json = [self dictionaryToJson:dic];
    
    if ([db open]){
        NSString *insertSql = @&quot;insert into 't_down_course'(courseId,downPath,courseInfo) values(?,?,?)&quot;;
        BOOL result = [db executeUpdate:insertSql,[NSString stringWithFormat:@&quot;%d&quot;,count],fileName,json];
        if (result){
            DLog(@&quot;添加数据成功&quot;);
            [self showAlertWithMessage:@&quot;添加数据 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;添加数据失败&quot;);
            [self showAlertWithMessage:@&quot;添加数据 --- 失败&quot; completion:nil];
        }
        count++;
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;插入数据类型必须为&lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; 的子类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基本类型需要封装为对应的包装类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;支持占位符，后添加再数据&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-7&quot;&gt;插入也支持以字典的方式&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *arguments = @{@&quot;identifier&quot;: @(identifier), @&quot;name&quot;: name, @&quot;date&quot;: date, @&quot;comment&quot;: comment ?: [NSNull null]};
BOOL success = [db executeUpdate:@&quot;INSERT INTO authors (identifier, name, date, comment) VALUES (:identifier, :name, :date, :comment)&quot; withParameterDictionary:arguments];
if (!success) {
    NSLog(@&quot;error = %@&quot;, [db lastErrorMessage]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-8&quot;&gt;支持对事务的控制&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[db open]

[db beginDeferredTransaction];//开启事务

BOOL result = [db executeUpdate:insertSql,[NSString stringWithFormat:@&quot;%d&quot;,count],fileName,json];

if(result){
	[db commit];// 提交事务
}else{
	[db rollback];// 回滚事务
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-9&quot;&gt;查询数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)selectData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        NSString *selectSql = @&quot;select * from t_down_course&quot;;
        FMResultSet * rs = [db executeQuery:selectSql];
        while ([rs next]) {
            int course = [rs intForColumn:@&quot;id&quot;];
            NSString * courseId = [rs stringForColumn:@&quot;courseId&quot;];
            NSString * downPath = [rs stringForColumn:@&quot;downPath&quot;];
            NSString * courseInfo = [rs stringForColumn:@&quot;courseInfo&quot;];

            DLog(@&quot;course id = %d, courseId = %@, downPath = %@  courseInfo = %@&quot;, course, courseId, downPath,courseInfo);
            
            NSMutableDictionary *dic = [self dictionaryWithJsonString:courseInfo];
            DLog(@&quot;%@&quot;,dic);
        }
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：即使操作结果只有一行，也需要先调用 FMResultSet 的 next 方法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FMDB提供了多个方法获取不同类型的数据&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;intForColumn:&lt;/li&gt;
  &lt;li&gt;longForColumn:&lt;/li&gt;
  &lt;li&gt;longLongIntForColumn:&lt;/li&gt;
  &lt;li&gt;boolForColumn:&lt;/li&gt;
  &lt;li&gt;doubleForColumn:&lt;/li&gt;
  &lt;li&gt;stringForColumn:&lt;/li&gt;
  &lt;li&gt;dateForColumn:&lt;/li&gt;
  &lt;li&gt;dataForColumn:&lt;/li&gt;
  &lt;li&gt;dataNoCopyForColumn:&lt;/li&gt;
  &lt;li&gt;UTF8StringForColumnIndex:&lt;/li&gt;
  &lt;li&gt;objectForColumn:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;这些方法也都有一个{类型} ForColumnIndex:,用于检索数据基于列的位置的结果,而不是列的名称。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如  &lt;code class=&quot;highlighter-rouge&quot;&gt;[rs intForColumnIndex:0]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;支持多个语句批处理&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *sql = @&quot;create table bulktest1 (id integer primary key autoincrement, x text);&quot;
                 &quot;create table bulktest2 (id integer primary key autoincrement, y text);&quot;
                 &quot;create table bulktest3 (id integer primary key autoincrement, z text);&quot;
                 &quot;insert into bulktest1 (x) values ('XXX');&quot;
                 &quot;insert into bulktest2 (y) values ('YYY');&quot;
                 &quot;insert into bulktest3 (z) values ('ZZZ');&quot;;

success = [db executeStatements:sql];

sql = @&quot;select count(*) as count from bulktest1;&quot;
       &quot;select count(*) as count from bulktest2;&quot;
       &quot;select count(*) as count from bulktest3;&quot;;

success = [self.db executeStatements:sql withResultBlock:^int(NSDictionary *dictionary) {
    NSInteger count = [dictionary[@&quot;count&quot;] integerValue];
    XCTAssertEqual(count, 1, @&quot;expected one record for dictionary %@&quot;, dictionary);
    return 0;
}];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-10&quot;&gt;更新数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)updateData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        BOOL result = [db executeUpdate:@&quot;update t_down_course set downPath = '更新的数据' where id = 3&quot;];
        if (result){
            DLog(@&quot;更新数据成功&quot;);
            [self showAlertWithMessage:@&quot;更新数据 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;更新数据失败&quot;);
            [self showAlertWithMessage:@&quot;更新数据 --- 失败&quot; completion:nil];
        }
        
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-11&quot;&gt;删除数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)deleteData{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        BOOL result = [db executeUpdate:@&quot;delete from t_down_course where id = 2&quot;];
        if (result){
            DLog(@&quot;删除数据成功&quot;);
            [self showAlertWithMessage:@&quot;删除数据 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;删除数据失败&quot;);
            [self showAlertWithMessage:@&quot;删除数据 --- 失败&quot; completion:nil];
        }
        
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-12&quot;&gt;删除表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)dropTable{
    FMDatabase *db = [FMDatabase databaseWithPath:fileName];
    if ([db open]){
        BOOL result = [db executeUpdate:@&quot;drop table t_down_course&quot;];
        if (result){
            DLog(@&quot;删除表成功&quot;);
            isTableExist = NO;
            [self showAlertWithMessage:@&quot;删除表 --- 成功&quot; completion:nil];
        }else{
            DLog(@&quot;删除表失败&quot;);
            [self showAlertWithMessage:@&quot;删除表 --- 失败&quot; completion:nil];
        }
        
        [db close];
    }else{
        [self showAlertWithMessage:@&quot;打开数据库 --- 失败&quot; completion:nil];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-13&quot;&gt;多线程操作&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果应用中使用了多线程操作数据库，那么就需要使用FMDatabaseQueue来保证线程安全了。 应用中不可在多个线程中共同使用一个FMDatabase对象操作数据库，这样会引起数据库数据混乱。 为了多线程操作数据库安全，FMDB使用了FMDatabaseQueue，使用FMDatabaseQueue很简单，首先用一个数据库文件地址来初使化FMDatabaseQueue，然后就可以将一个闭包(block)传入inDatabase方法中。 在闭包中操作数据库，而不直接参与FMDatabase的管理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;section-14&quot;&gt;创建单例&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  XCDatabaseHelper.h
//  Training
//
//  Created by LXC on 2016/12/3.
//  Copyright © 2016年 LXC. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &quot;FMDB.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XCDatabaseHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCDatabaseHelper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  XCDatabaseHelper.m
//  Training
//
//  Created by LXC on 2016/12/3.
//  Copyright © 2016年 LXC. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &quot;XCDatabaseHelper.h&quot;
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XCDatabaseHelper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FMDatabaseQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDocumentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUserDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lastObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbFilePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;downCourse.sqlite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabaseQueue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;databaseQueueWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCDatabaseHelper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_once_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__strong&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_sharedObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_sharedObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_sharedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FMDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-15&quot;&gt;调用&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        [[XCDatabaseHelper sharedInstance] inDatabase:^(FMDatabase *db) {
            BOOL result = [db executeUpdate:@&quot;update t_down_course set downloadStatus = '1' where courseId = ?&quot;,_course.ids];
            if (result){

            }
        }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里就不需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-16&quot;&gt;注意&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;FMDatabaseQueue虽然看似一个队列，实际上它本身并不是，它通过内部创建一个Serial的dispatch_queue_t来处理通过inDatabase和inTransaction传入的Blocks，所以当我们在主线程（或者后台）调用inDatabase或者inTransaction时，代码实际上是同步的。FMDatabaseQueue这么设计的目的是让我们避免发生并发访问数据库的问题，因为对数据库的访问可能是随机的（在任何时候）、不同线程间（不同的网络回调等）的请求。内置一个Serial队列后，FMDatabaseQueue就变成线程安全了，所有的数据库访问都是同步执行，而且这比使用@synchronized或NSLock要高效得多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;但是这么一来就有了一个问题：如果后台在执行大量的更新，而主线程也需要访问数据库，虽然要访问的数据量很少，但是在后台执行完之前，还是会阻塞主线程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;引用这篇&lt;a href=&quot;http://blog.csdn.net/zhangao0086/article/details/44223007&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over~~ 洗澡睡觉😴😴😴&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Dec 2016 23:24:03 +0800</pubDate>
        <link>http://localhost:4000/2016/12/FMDB%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/FMDB%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</guid>
        
        <category>FMDB</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
